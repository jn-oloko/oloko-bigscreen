/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";
export const SPEC_VERSION = "v0.0.1"; 
export interface AccountDTO {
  accountBizType?: "Regular" | "Official";
  accountType?: "FreeTrial" | "Enterprise" | "Professional" | "LocalDeploy";
  averageConsumption?: number;
  bizId?: string;
  businessLicense?: string;
  companyAddress?: string;
  companyName?: string;
  cuisine?: string;
  dingTalkAgentId?: string;
  dingTalkCorpId?: string;
  logo?: string;
  name?: string;
  numberOfTableware?: string;
  primaryUserBizId?: string;
  redirectUrl?: string;
  restaurantSize?: string;
  staffSize?: string;
  userName?: string;
  validUtil?: string;
}

export interface AccountUserAuthorityDTO {
  accountBizId?: string;
  accountName?: string;
  auditStatus?: boolean;
  operations?: string[];
  userAuthorityBizId?: string;
  userAuthorityDisplayName?: string;
  userAuthorityName?: string;
  userBizId?: string;
  userName?: string;
}

export interface AccountUserDTO {
  authorityBizId?: string;
  authorityDisplayName?: string;
  authorityName?: string;
  bizId?: string;
  departmentBizId?: string;
  departmentName?: string;
  email?: string;
  mobile?: string;
  name?: string;
  positions?: string;
  userType?: string;
  wxOpenId?: string;
}

export interface BatchAddUserToDepartDTO {
  placeholder?: string;
  userBizIds?: string[];
}

export interface BatchGetUserRequestDTO {
  bizIds?: string[];
  placeholder?: string;
}

export interface BoxDTO {
  bizId?: string;
  boxCode?: string;
  boxName?: string;
  restaurantAddress?: string;
  restaurantBizId?: string;
  restaurantName?: string;
}

export interface ConsumeLogDTO {
  bizId?: string;
  consumptionStatus?: "recharge" | "consumption";
  desAmount?: string;
  giftAmount?: number;
  md5check?: string;
  openid?: string;
  payName?: string;
  payStatus?: "InPayment" | "PaymentCancellation" | "PaymentCompletion" | "PaymentSucceeded" | "PaymentFailed";
  payment?: number;
  updatedAt?: string;
}

export interface CreateMessageDTO {
  delayTimeLength?: number;
  initUserBizId?: string;
  messageDesc?: string;
  messageTitle?: string;
  messageType?: string;
  smsTemplateCode?: string;
  smsTemplateParams?: {
  [key: string]: string;
};
  targetUserBizId?: string;
  wechatRedirectUrl?: string;
  wechatTemplateId?: string;
  wechatTemplateParams?: {[key: string]: any};
}

export interface CreateSessionRequestDTO {
  dingTalkUnionId?: string;
  dingTalkUserId?: string;
  mobile?: string;
  password?: string;
  wxUnionId?: string;
}

export interface CreateSystemOperationLogRequestDTO {
  afterChange?: {[key: string]: any};
  beforeChange?: {[key: string]: any};
  dataSources?: string;
  systemOperationType?: string;
  userBizId?: string;
}

export interface CreateUserRequestDTO {
  request?: UpertUserRequestDTO;
  verificationCode?: string;
}

export interface CustomDomainObjectDTO {
  bizId?: string;
  content?: JsonItem[];
  contentSchema?: JsonNode;
  customDomainObjectTemplateBizId?: string;
  customDomainObjectTemplateBizName?: string;
  displayName?: string;
}

export interface CustomDomainObjectTemplateDTO {
  bizId?: string;
  bizName?: string;
  contentSchema?: JsonNode;
  displayName?: string;
  operations?: string[];
  sortCollectionList?: SortCollectionDTO[];
}

export interface DamageDTO {
  bizId?: string;
  boxDamage?: number;
  creationTimeOfLossReport?: string;
  damageBowl?: number;
  damageGlass?: number;
  damagePlate?: number;
  damagedTeacup?: number;
  restaurantBizId?: string;
  restaurantName?: string;
}

export interface DeliverGoodsDTO {
  bizId?: string;
  consignorBizId?: string;
  orderReceiverBizId?: string;
  routeName?: string;
  shipmentDate?: string;
  shipmentRouteBizId?: string;
  totalBoxes?: number;
  userName?: string;
}

export interface DepartmentDTO {
  accountBizId?: string;
  bizId?: string;
  description?: string;
  name?: string;
  parentDepartmentBizId?: string;
  parentDepartmentName?: string;
}

export interface FeedbackDTO {
  bizId?: string;
  feedbackPicture1?: string;
  feedbackPicture2?: string;
  feedbackPicture3?: string;
  feedbackTime?: string;
  fullName?: string;
  handledBy?: string;
  mailbox?: string;
  opinion?: string;
  processingStatus?: "pending" | "processed";
  processingTime?: string;
  telephone?: string;
  userInformationBizId?: string;
}

export interface GetUserByMobileAndPasswordRequstDTO {
  mobile?: string;
  password?: string;
}

export interface InventoryDTO {
  bizId?: string;
  countCreationTime?: string;
  damageBowl?: number;
  damageGlass?: number;
  damagePlate?: number;
  damagedTeacup?: number;
  dissatisfiedTeacup?: number;
  emptyBox?: number;
  fullBox?: number;
  loseBowl?: number;
  loseGlass?: number;
  losePlate?: number;
  name?: string;
  reasonRemarks?: string;
  restaurantBizId?: string;
  restaurantName?: string;
  tablewareSet?: number;
  userBizId?: string;
}

export interface JsonItem {
  identifier?: string;
  label?: string;
  rawValue?: string;
  type?: string;
  value?: {[key: string]: any};
}

export interface JsonNode {[key: string]: any}

export interface KeyCustomersDTO {
  adopt?: "adopt" | "refuse" | "pendingReview";
  bizId?: string;
  businessLicense?: string;
  compLogo?: string;
  compName?: string;
  contactNumber?: string;
  contactTitle?: string;
  contract?: string;
  cooperativeBrands?: string;
  headquartersLocation?: string;
  mainCuisine?: string;
  numberOfStores?: string;
  personInCharge?: string;
  remark?: string;
  responsibleForTelephone?: string;
  restaurantBizId?: string;
  restaurantName?: string;
}

export interface MessageDTO {
  bizId?: string;
  createdTime?: string;
  initUserBizId?: string;
  initUserName?: string;
  messageDesc?: string;
  messageStatus?: "Read" | "Unread";
  messageTitle?: string;
  messageType?: string;
  readTime?: string;
  targetUserBizId?: string;
  targetUserName?: string;
}

export interface ModelAndView {
  empty?: boolean;
  model?: {[key: string]: any};
  modelMap?: {
  [key: string]: {[key: string]: any};
};
  reference?: boolean;
  status?: "100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED";
  view?: View;
  viewName?: string;
}

export interface OperateLogDTO {
  accountBizId?: string;
  accountName?: string;
  bizId?: string;
  modularName?: string;
  optLog?: string;
  userBizId?: string;
  userName?: string;
}

export interface OperationDTO {
  bizId?: string;
  bizName?: string;
  comment?: string;
}

export interface OrderDetailsDTO {
  bizId?: string;
  deliveryDate?: string;
  deliveryUserBizId?: string;
  deliveryUserName?: string;
  messageUserBizId?: string;
  messageUserName?: string;
  payPrice?: number;
  payUserBizId?: string;
  payUserName?: string;
}

export interface OrderPlanDTO {
  bizId?: string;
  orderCode?: string;
  orderDate?: string;
  orderDetailsDTOS?: OrderDetailsDTO;
  orderPrice?: number;
  orderStatus?: "WaitShip" | "WaitDelivery" | "WaitSigned" | "Completed" | "Cancellation";
  orderUserBizId?: string;
  orderUserName?: string;
  paymentTime?: string;
  products?: {
  [key: string]: OrderPlanProductDTO[];
};
  restaurantBizId?: string;
  restaurantName?: string;
  routeBizId?: string;
  routeName?: string;
}

export interface OrderPlanProductDTO {
  productBizId?: string;
  productCode?: string;
  productName?: string;
  productNum?: number;
  productPrice?: number;
}

export interface PaginationDTOOfListOfAccountDTO {
  data?: AccountDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfBoxDTO {
  data?: BoxDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfConsumeLogDTO {
  data?: ConsumeLogDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfCustomDomainObjectDTO {
  data?: CustomDomainObjectDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfCustomDomainObjectTemplateDTO {
  data?: CustomDomainObjectTemplateDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfDamageDTO {
  data?: DamageDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfDeliverGoodsDTO {
  data?: DeliverGoodsDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfFeedbackDTO {
  data?: FeedbackDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfInventoryDTO {
  data?: InventoryDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfKeyCustomersDTO {
  data?: KeyCustomersDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfMessageDTO {
  data?: MessageDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfOperateLogDTO {
  data?: OperateLogDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfOperationDTO {
  data?: OperationDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfOrderPlanDTO {
  data?: OrderPlanDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfProductDTO {
  data?: ProductDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfRecoveryDTO {
  data?: RecoveryDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfRestaurantDTO {
  data?: RestaurantDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfRouteDTO {
  data?: RouteDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfSystemOperationLogDTO {
  data?: SystemOperationLogDTO[];
  total?: number;
}

export interface PaginationDTOOfListOfWithdrawDTO {
  data?: WithdrawDTO[];
  total?: number;
}

export interface ProductDTO {
  bizId?: string;
  commodityType?: "Ceramics" | "Plastic";
  numberOfSets?: number;
  picture1?: string;
  picture2?: string;
  picture3?: string;
  pictureAddress?: string;
  productCode?: string;
  productName?: string;
  productPrice?: number;
  productRemarks?: string;
}

export interface RecoveryDTO {
  bizId?: string;
  bowl?: number;
  chopsticks?: number;
  emptyBox?: number;
  fullBox?: number;
  glass?: number;
  name?: string;
  plate?: number;
  restaurantBizId?: string;
  restaurantName?: string;
  spoon?: number;
  teacups?: number;
  userBizId?: string;
}

export interface ResetPasswordRequestDTO {
  requstDTO?: GetUserByMobileAndPasswordRequstDTO;
  verificationCode?: string;
}

export interface ResponseDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: {[key: string]: any};
  msg?: string;
}

export interface ResponseDTOOfAccountDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: AccountDTO;
  msg?: string;
}

export interface ResponseDTOOfAccountUserAuthorityDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: AccountUserAuthorityDTO;
  msg?: string;
}

export interface ResponseDTOOfBoxDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: BoxDTO;
  msg?: string;
}

export interface ResponseDTOOfConsumeLogDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: ConsumeLogDTO;
  msg?: string;
}

export interface ResponseDTOOfCustomDomainObjectDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: CustomDomainObjectDTO;
  msg?: string;
}

export interface ResponseDTOOfCustomDomainObjectTemplateDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: CustomDomainObjectTemplateDTO;
  msg?: string;
}

export interface ResponseDTOOfDamageDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: DamageDTO;
  msg?: string;
}

export interface ResponseDTOOfDeliverGoodsDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: DeliverGoodsDTO;
  msg?: string;
}

export interface ResponseDTOOfDepartmentDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: DepartmentDTO;
  msg?: string;
}

export interface ResponseDTOOfFeedbackDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: FeedbackDTO;
  msg?: string;
}

export interface ResponseDTOOfInventoryDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: InventoryDTO;
  msg?: string;
}

export interface ResponseDTOOfKeyCustomersDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: KeyCustomersDTO;
  msg?: string;
}

export interface ResponseDTOOfListOfAccountUserDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: AccountUserDTO[];
  msg?: string;
}

export interface ResponseDTOOfListOfCustomDomainObjectDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: CustomDomainObjectDTO[];
  msg?: string;
}

export interface ResponseDTOOfListOfDepartmentDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: DepartmentDTO[];
  msg?: string;
}

export interface ResponseDTOOfListOfMessageDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: MessageDTO[];
  msg?: string;
}

export interface ResponseDTOOfListOfProductDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: ProductDTO[];
  msg?: string;
}

export interface ResponseDTOOfListOfRestaurantDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: RestaurantDTO[];
  msg?: string;
}

export interface ResponseDTOOfListOfSelectDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: SelectDTO[];
  msg?: string;
}

export interface ResponseDTOOfListOfUserAuthorityDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: UserAuthorityDTO[];
  msg?: string;
}

export interface ResponseDTOOfListOfUserDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: UserDTO[];
  msg?: string;
}

export interface ResponseDTOOfListOfUserDepartmentDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: UserDepartmentDTO[];
  msg?: string;
}

export interface ResponseDTOOfMessageDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: MessageDTO;
  msg?: string;
}

export interface ResponseDTOOfOperateLogDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: OperateLogDTO;
  msg?: string;
}

export interface ResponseDTOOfOperationDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: OperationDTO;
  msg?: string;
}

export interface ResponseDTOOfOrderPlanDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: OrderPlanDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfAccountDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfAccountDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfBoxDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfBoxDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfConsumeLogDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfConsumeLogDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfCustomDomainObjectDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectTemplateDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfCustomDomainObjectTemplateDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfDamageDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfDamageDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfDeliverGoodsDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfDeliverGoodsDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfFeedbackDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfFeedbackDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfInventoryDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfInventoryDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfKeyCustomersDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfKeyCustomersDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfMessageDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfMessageDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfOperateLogDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfOperateLogDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfOperationDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfOperationDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfOrderPlanDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfOrderPlanDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfProductDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfProductDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfRecoveryDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfRecoveryDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfRestaurantDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfRestaurantDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfRouteDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfRouteDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfSystemOperationLogDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfSystemOperationLogDTO;
  msg?: string;
}

export interface ResponseDTOOfPaginationDTOOfListOfWithdrawDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: PaginationDTOOfListOfWithdrawDTO;
  msg?: string;
}

export interface ResponseDTOOfProductDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: ProductDTO;
  msg?: string;
}

export interface ResponseDTOOfRecoveryDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: RecoveryDTO;
  msg?: string;
}

export interface ResponseDTOOfRestaurantDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: RestaurantDTO;
  msg?: string;
}

export interface ResponseDTOOfRouteDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: RouteDTO;
  msg?: string;
}

export interface ResponseDTOOfSelectDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: SelectDTO;
  msg?: string;
}

export interface ResponseDTOOfSessionDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: SessionDTO;
  msg?: string;
}

export interface ResponseDTOOfSystemOperationLogDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: SystemOperationLogDTO;
  msg?: string;
}

export interface ResponseDTOOfUserAuthorityDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: UserAuthorityDTO;
  msg?: string;
}

export interface ResponseDTOOfUserDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: UserDTO;
  msg?: string;
}

export interface ResponseDTOOfWithdrawDTO {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: WithdrawDTO;
  msg?: string;
}

export interface ResponseDTOOfobject {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: {[key: string]: any};
  msg?: string;
}

export interface ResponseDTOOfstring {
  code?: "SUCCESS" | "BAD_REQUEST" | "NOT_FOUND" | "EMPTY_USER_NAME" | "PASSWORD_STRENGTH_ERROR" | "EMAIL_INVALID" | "MOBILE_INVALID" | "ACCOUNT_NOT_EXIST" | "USER_NOT_EXIST" | "USER_ALREADY_HAS_ACCOUNT" | "NOT_AUTHORIZED" | "CONFLICT" | "INVALID_VERIFICATION_CODE" | "NEED_LOGIN" | "LAST_ITEM" | "DATA_DUPLICATED" | "WRONG_PASSWORD" | "NEED_UPGRADE_ACCOUNT" | "REQUIRE_MOBILE" | "INTERNAL_SERVER_ERROR" | "UPDATE_STOCK_ERROR" | "PARAM_INVALID_ERROR";
  data?: string;
  msg?: string;
}

export interface RestaurantDTO {
  accountBizId?: string;
  accountName?: string;
  accountNumber?: string;
  accountOfReferrer?: string;
  ascription?: string;
  ascriptionName?: string;
  bankAccountName?: string;
  bankOfDeposit?: string;
  bankOfDepositOfTheReferrer?: string;
  bizId?: string;
  business?: string;
  businessBizId?: string;
  businessLicenseAddress?: string;
  capitalizeCharges?: string;
  capitalizeDepositAmount?: string;
  consumption?: number;
  contactTelephoneInformation?: string;
  contract?: string;
  contractDate?: string;
  contractValidity?: string;
  deliveryToday?: string;
  deposit?: boolean;
  doorPhoto?: string;
  endBusinessHours?: string;
  indoorPhotos?: string;
  introducerAccountNumber?: string;
  introduction?: boolean;
  isItChained?: boolean;
  keyCustomersId?: string;
  lastSettlementTime?: string;
  latitude?: string;
  longitude?: string;
  lowercaseCharges?: number;
  lowercaseDepositAmount?: number;
  mainCategories?: string;
  mainCategoriesBizId?: string;
  maintenanceUserBizId?: string;
  maintenanceUserName?: string;
  numberOfTablewareSets?: string;
  openNingHours?: string;
  paymentMethod?: "app" | "transferAccounts" | "cash";
  phoneName?: string;
  phoneNumber?: string;
  pictureAddress?: string;
  product?: string;
  referrer?: string;
  referrerUserBizId?: string;
  referrerUserName?: string;
  restScale?: string;
  restScaleBizId?: string;
  restStatus?: string;
  restStatusBizId?: string;
  restaurantAddress?: string;
  restaurantName?: string;
  restaurantProducts?: {
  [key: string]: RestaurantProductDTO[];
};
  restaurantStatus?: "cooperation" | "suspend" | "closeDown" | "expirationOfContract" | "business";
  reviewerStatus?: "Unreviewed" | "Approved" | "Rejected";
  reviewerUserBizId?: string;
  reviewerUserName?: string;
  salesUserBizId?: string;
  salesUserName?: string;
  seatNumber?: number;
  settlementMethod?: "payAdvance" | "cashSettlement" | "weekSettlement" | "monthSettlement";
  settlementStatus?: "settled" | "unSettled";
  signatoryUserBizId?: string;
  signatoryUserName?: string;
  specialDishes?: string;
  staffNumber?: number;
  startBusinessHours?: string;
  tablewarePlacementPhotos?: string;
  traffic?: string;
  trafficBizId?: string;
}

export interface RestaurantProductDTO {
  price?: number;
  productBizId?: string;
  productName?: string;
}

export interface RouteDTO {
  bizId?: string;
  carNumber?: string;
  licensePlateNumber?: string;
  remark?: string;
  restaurantDTOS?: RestaurantDTO[];
  routeName?: string;
  routeUserBizId?: string;
  routeUserName?: string;
  userDTOS?: UserDTO[];
}

export interface SelectDTO {
  name?: string;
  value?: string;
}

export interface SendSmsRequestDTO {
  bizCode?: "Register" | "Reset_Password" | "Equipment_Alert";
  mobile?: string;
}

export interface SessionDTO {
  accountBizId?: string;
  accountBizType?: "Regular" | "Official";
  operations?: string[];
  token?: string;
  userAuthorityName?: string;
  userBizId?: string;
}

export interface SortCollectionDTO {
  alias?: string;
  sortField?: string;
}

export interface SystemOperationLogDTO {
  accountBizId?: string;
  afterChange?: JsonNode;
  beforeChange?: JsonNode;
  bizId?: string;
  dataSources?: string;
  systemOperationTime?: string;
  systemOperationType?: string;
  userBizId?: string;
  userName?: string;
}

export interface UpdateDepartUser {
  newBizId?: string;
  placeholder?: string;
}

export interface UpertUserRequestDTO {
  bizId?: string;
  dingTalkUnionId?: string;
  dingTalkUserId?: string;
  email?: string;
  headPortrait?: string;
  mobile?: string;
  name?: string;
  password?: string;
  realName?: string;
  wxOpenId?: string;
  wxUnionId?: string;
}

export interface UpsertAccountRequestDTO {
  accountBizType?: "Regular" | "Official";
  accountType?: "FreeTrial" | "Enterprise" | "Professional" | "LocalDeploy";
  averageConsumption?: number;
  businessLicense?: string;
  companyAddress?: string;
  companyName?: string;
  cuisine?: string;
  dingTalkAgentId?: string;
  dingTalkCorpId?: string;
  logo?: string;
  name?: string;
  numberOfTableware?: string;
  redirectUrl?: string;
  restaurantSize?: string;
  staffSize?: string;
  userName?: string;
}

export interface UpsertBoxRequestDTO {
  boxCode?: string;
  boxName?: string;
  restaurantAddress?: string;
  restaurantBizId?: string;
}

export interface UpsertConsumeLogRequestDTO {
  consumptionStatus?: "recharge" | "consumption";
  giftAmount?: number;
  openid?: string;
  payStatus?: "InPayment" | "PaymentCancellation" | "PaymentCompletion" | "PaymentSucceeded" | "PaymentFailed";
  payment?: number;
  updatedAt?: string;
}

export interface UpsertCustomDomainObjectRequestDTO {
  content?: JsonNode;
  customDomainObjectTemplateBizId?: string;
  displayName?: string;
}

export interface UpsertCustomDomainObjectTemplateRequestDTO {
  bizName?: string;
  contentSchema?: JsonNode;
  displayName?: string;
  operations?: string[];
  sortCollectionList?: SortCollectionDTO[];
}

export interface UpsertDamageRequestDTO {
  boxDamage?: number;
  creationTimeOfLossReport?: string;
  damageBowl?: number;
  damageGlass?: number;
  damagePlate?: number;
  damagedTeacup?: number;
  restaurantBizId?: string;
  restaurantName?: string;
}

export interface UpsertDeliverGoodsDTO {
  bizId?: string;
  consignorBizId?: string;
  orderPlanBizIds?: string;
  orderReceiverBizId?: string;
  routeName?: string;
  shipmentDate?: string;
  shipmentRouteBizId?: string;
  totalBoxes?: number;
  userName?: string;
}

export interface UpsertDeliveryOrderDTO {
  boxBizIds?: string;
  orderBizId?: string;
}

export interface UpsertDepartmentRequestDTO {
  description?: string;
  name?: string;
  parentDepartmentBizId?: string;
}

export interface UpsertFeedbackRequestDTO {
  feedbackPicture1?: string;
  feedbackPicture2?: string;
  feedbackPicture3?: string;
  feedbackTime?: string;
  fullName?: string;
  handledBy?: string;
  mailbox?: string;
  opinion?: string;
  processingStatus?: "pending" | "processed";
  processingTime?: string;
  telephone?: string;
  userInformationBizId?: string;
}

export interface UpsertInventoryRequestDTO {
  countCreationTime?: string;
  damageBowl?: number;
  damageGlass?: number;
  damagePlate?: number;
  damagedTeacup?: number;
  dissatisfiedTeacup?: number;
  emptyBox?: number;
  fullBox?: number;
  loseBowl?: number;
  loseGlass?: number;
  losePlate?: number;
  name?: string;
  reasonRemarks?: string;
  restaurantBizId?: string;
  restaurantName?: string;
  tablewareSet?: number;
  userBizId?: string;
}

export interface UpsertKeyCustomersRequestDTO {
  businessLicense?: string;
  compLogo?: string;
  compName?: string;
  contactNumber?: string;
  contactTitle?: string;
  contract?: string;
  cooperativeBrands?: string;
  headquartersLocation?: string;
  mainCuisine?: string;
  numberOfStores?: string;
  personInCharge?: string;
  remark?: string;
  responsibleForTelephone?: string;
  restaurantBizId?: string;
}

export interface UpsertOperateLogRequestDTO {
  accountBizId?: string;
  modularName?: string;
  optLog?: string;
  userBizId?: string;
}

export interface UpsertOperationRequestDTO {
  bizName?: string;
  comment?: string;
}

export interface UpsertOrderPlanRequestDTO {
  deliveryDate?: string;
  messageUserBizId?: string;
  orderCode?: string;
  orderDate?: string;
  orderPrice?: number;
  paymentTime?: string;
  products?: {
  [key: string]: OrderPlanProductDTO[];
};
  restaurantBizId?: string;
  routeBizId?: string;
}

export interface UpsertProductRequestDTO {
  commodityType?: string;
  numberOfSets?: number;
  picture1?: string;
  picture2?: string;
  picture3?: string;
  pictureAddress?: string;
  productCode?: string;
  productName?: string;
  productPrice?: number;
  productRemarks?: string;
}

export interface UpsertRecoveryRequestDTO {
  bowl?: number;
  chopsticks?: number;
  emptyBox?: number;
  fullBox?: number;
  glass?: number;
  name?: string;
  plate?: number;
  restaurantBizId?: string;
  restaurantName?: string;
  spoon?: number;
  teacups?: number;
  userBizId?: string;
}

export interface UpsertRestaurantRequestDTO {
  accountBizId?: string;
  accountName?: string;
  accountNumber?: string;
  accountOfReferrer?: string;
  ascription?: string;
  ascriptionName?: string;
  bankAccountName?: string;
  bankOfDeposit?: string;
  bankOfDepositOfTheReferrer?: string;
  business?: string;
  businessBizId?: string;
  businessLicenseAddress?: string;
  capitalizeCharges?: string;
  capitalizeDepositAmount?: string;
  commodityType?: string;
  consumption?: number;
  contactTelephoneInformation?: string;
  contract?: string;
  contractDate?: string;
  contractValidity?: string;
  deliveryToday?: string;
  deposit?: string;
  doorPhoto?: string;
  endBusinessHours?: string;
  indoorPhotos?: string;
  introducerAccountNumber?: string;
  introduction?: string;
  isItChained?: string;
  keyCustomersId?: string;
  lastSettlementTime?: string;
  latitude?: string;
  longitude?: string;
  lowercaseCharges?: number;
  lowercaseDepositAmount?: number;
  mainCategoriesBizId?: string;
  maintenanceUserBizId?: string;
  numberOfTablewareSets?: string;
  openNingHours?: string;
  paymentMethod?: "app" | "transferAccounts" | "cash";
  phoneName?: string;
  phoneNumber?: string;
  pictureAddress?: string;
  referrer?: string;
  referrerUserBizId?: string;
  restScale?: string;
  restScaleBizId?: string;
  restStatus?: string;
  restStatusBizId?: string;
  restaurantAddress?: string;
  restaurantName?: string;
  restaurantProducts?: {
  [key: string]: RestaurantProductDTO[];
};
  restaurantStatus?: "cooperation" | "suspend" | "closeDown" | "expirationOfContract" | "business";
  reviewerStatus?: "Unreviewed" | "Approved" | "Rejected";
  reviewerUserBizId?: string;
  salesUserBizId?: string;
  seatNumber?: number;
  settlementMethod?: "payAdvance" | "cashSettlement" | "weekSettlement" | "monthSettlement";
  settlementStatus?: "settled" | "unSettled";
  signatoryUserBizId?: string;
  specialDishes?: string;
  staffNumber?: number;
  startBusinessHours?: string;
  tablewarePlacementPhotos?: string;
  traffic?: string;
  trafficBizId?: string;
}

export interface UpsertRouteRequestDTO {
  carNumber?: string;
  licensePlateNumber?: string;
  remark?: string;
  restaurantBizIds?: string[];
  routeName?: string;
  routeUserBizId?: string;
  userBizIds?: string[];
}

export interface UpsertUserAuthorityRequestDTO {
  displayName?: string;
  name?: string;
  operations?: string[];
}

export interface UpsertUserDepartmentDTO {
  placeholder?: string;
  positions?: string;
}

export interface UpsertWithdrawRequestDTO {
  numberBoxes?: number;
  recycleCreationTime?: string;
  restaurantBizId?: string;
  returnTeacup?: number;
  returnedBy?: string;
  withdrawBowl?: number;
  withdrawChopsticks?: number;
  withdrawClean?: number;
  withdrawDirty?: number;
  withdrawGlass?: number;
  withdrawPlate?: number;
  withdrawSpoon?: number;
}

export interface UserAuthorityDTO {
  bizId?: string;
  displayName?: string;
  name?: string;
  operations?: OperationDTO[];
}

export interface UserDTO {
  bizId?: string;
  dingTalkUnionId?: string;
  dingTalkUserId?: string;
  email?: string;
  headPortrait?: string;
  mobile?: string;
  name?: string;
  realName?: string;
  userType?: "InternalAdmin" | "Regular";
  wxOpenId?: string;
  wxUnionId?: string;
}

export interface UserDepartmentDTO {
  bizId?: string;
  dingTalkUnionId?: string;
  dingTalkUserId?: string;
  email?: string;
  mobile?: string;
  name?: string;
  positions?: string;
  userType?: string;
  wxOpenId?: string;
  wxUnionId?: string;
}

export interface View {
  contentType?: string;
}

export interface WithdrawDTO {
  bizId?: string;
  numberBoxes?: number;
  recycleCreationTime?: string;
  restaurantBizId?: string;
  restaurantName?: string;
  returnTeacup?: number;
  returnedBy?: string;
  withdrawBowl?: number;
  withdrawChopsticks?: number;
  withdrawClean?: number;
  withdrawDirty?: number;
  withdrawGlass?: number;
  withdrawPlate?: number;
  withdrawSpoon?: number;
}

/**
 * verificationCodeRequest
 */
export type SendSmsRequestDTORequestBody = SendSmsRequestDTO;

/**
 * request
 */
export type UpsertOperationRequestDTORequestBody = UpsertOperationRequestDTO;

/**
 * request
 */
export type CreateUserRequestDTORequestBody = CreateUserRequestDTO;

/**
 * request
 */
export type UpsertDeliverGoodsDTORequestBody = UpsertDeliverGoodsDTO;

/**
 * request
 */
export type UpsertUserAuthorityRequestDTORequestBody = UpsertUserAuthorityRequestDTO;

/**
 * request
 */
export type UpsertCustomDomainObjectTemplateRequestDTORequestBody = UpsertCustomDomainObjectTemplateRequestDTO;

/**
 * bizIds
 */
export type BatchDeleteMessageUsingPOSTBizidsRequestBody = string[];

/**
 * request
 */
export type UpsertCustomDomainObjectRequestDTORequestBody = UpsertCustomDomainObjectRequestDTO;

/**
 * request
 */
export type UpsertConsumeLogRequestDTORequestBody = UpsertConsumeLogRequestDTO;

/**
 * request
 */
export type UpsertFeedbackRequestDTORequestBody = UpsertFeedbackRequestDTO;

/**
 * request
 */
export type UpsertInventoryRequestDTORequestBody = UpsertInventoryRequestDTO;

/**
 * request
 */
export type UpsertOrderPlanRequestDTORequestBody = UpsertOrderPlanRequestDTO;

export type ErrorHtmlUsingGETProps = Omit<GetProps<void, void, void, void>, "path">;

/**
 * errorHtml
 */
export const ErrorHtmlUsingGET = (props: ErrorHtmlUsingGETProps) => (
  <Get<void, void, void, void>
    path={`/error`}
    
    {...props}
  />
);

export type UseErrorHtmlUsingGETProps = Omit<UseGetProps<void, void, void, void>, "path">;

/**
 * errorHtml
 */
export const useErrorHtmlUsingGET = (props: UseErrorHtmlUsingGETProps) => useGet<void, void, void, void>(`/error`, props);


export type ErrorHtmlUsingPOSTProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * errorHtml
 */
export const ErrorHtmlUsingPOST = (props: ErrorHtmlUsingPOSTProps) => (
  <Mutate<void, void, void, void, void>
    verb="POST"
    path={`/error`}
    
    {...props}
  />
);

export type UseErrorHtmlUsingPOSTProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * errorHtml
 */
export const useErrorHtmlUsingPOST = (props: UseErrorHtmlUsingPOSTProps) => useMutate<void, void, void, void, void>("POST", `/error`, props);


export type ErrorHtmlUsingPUTProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * errorHtml
 */
export const ErrorHtmlUsingPUT = (props: ErrorHtmlUsingPUTProps) => (
  <Mutate<void, void, void, void, void>
    verb="PUT"
    path={`/error`}
    
    {...props}
  />
);

export type UseErrorHtmlUsingPUTProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * errorHtml
 */
export const useErrorHtmlUsingPUT = (props: UseErrorHtmlUsingPUTProps) => useMutate<void, void, void, void, void>("PUT", `/error`, props);


export type ErrorHtmlUsingDELETEProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * errorHtml
 */
export const ErrorHtmlUsingDELETE = (props: ErrorHtmlUsingDELETEProps) => (
  <Mutate<void, void, void, void, void>
    verb="DELETE"
    path={`/error`}
    
    {...props}
  />
);

export type UseErrorHtmlUsingDELETEProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * errorHtml
 */
export const useErrorHtmlUsingDELETE = (props: UseErrorHtmlUsingDELETEProps) => useMutate<void, void, void, void, void>("DELETE", `/error`, {   ...props });


export type ErrorHtmlUsingPATCHProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * errorHtml
 */
export const ErrorHtmlUsingPATCH = (props: ErrorHtmlUsingPATCHProps) => (
  <Mutate<void, void, void, void, void>
    verb="PATCH"
    path={`/error`}
    
    {...props}
  />
);

export type UseErrorHtmlUsingPATCHProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * errorHtml
 */
export const useErrorHtmlUsingPATCH = (props: UseErrorHtmlUsingPATCHProps) => useMutate<void, void, void, void, void>("PATCH", `/error`, props);


export interface ParseUsingGETQueryParams {
  /**
   * imageUrl
   */
  imageUrl: string;
}

export type ParseUsingGETProps = Omit<GetProps<string, void, ParseUsingGETQueryParams, void>, "path">;

/**
 * 营业执照
 */
export const ParseUsingGET = (props: ParseUsingGETProps) => (
  <Get<string, void, ParseUsingGETQueryParams, void>
    path={`/ocr`}
    
    {...props}
  />
);

export type UseParseUsingGETProps = Omit<UseGetProps<string, void, ParseUsingGETQueryParams, void>, "path">;

/**
 * 营业执照
 */
export const useParseUsingGET = (props: UseParseUsingGETProps) => useGet<string, void, ParseUsingGETQueryParams, void>(`/ocr`, props);


export interface GetAccountsUsingGETQueryParams {
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
}

export type GetAccountsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfAccountDTO, void, GetAccountsUsingGETQueryParams, void>, "path">;

/**
 * getAccounts
 */
export const GetAccountsUsingGET = (props: GetAccountsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfAccountDTO, void, GetAccountsUsingGETQueryParams, void>
    path={`/olokoservice/account`}
    
    {...props}
  />
);

export type UseGetAccountsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfAccountDTO, void, GetAccountsUsingGETQueryParams, void>, "path">;

/**
 * getAccounts
 */
export const useGetAccountsUsingGET = (props: UseGetAccountsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfAccountDTO, void, GetAccountsUsingGETQueryParams, void>(`/olokoservice/account`, props);


export type CreateAccountUsingPOSTProps = Omit<MutateProps<ResponseDTOOfAccountDTO | void, void, void, UpsertAccountRequestDTO, void>, "path" | "verb">;

/**
 * createAccount
 */
export const CreateAccountUsingPOST = (props: CreateAccountUsingPOSTProps) => (
  <Mutate<ResponseDTOOfAccountDTO | void, void, void, UpsertAccountRequestDTO, void>
    verb="POST"
    path={`/olokoservice/account`}
    
    {...props}
  />
);

export type UseCreateAccountUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfAccountDTO | void, void, void, UpsertAccountRequestDTO, void>, "path" | "verb">;

/**
 * createAccount
 */
export const useCreateAccountUsingPOST = (props: UseCreateAccountUsingPOSTProps) => useMutate<ResponseDTOOfAccountDTO | void, void, void, UpsertAccountRequestDTO, void>("POST", `/olokoservice/account`, props);


export interface GetAccountInfoUsingGETQueryParams {
  /**
   * name
   */
  name: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
}

export type GetAccountInfoUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfAccountDTO, void, GetAccountInfoUsingGETQueryParams, void>, "path">;

/**
 * getAccountInfo
 */
export const GetAccountInfoUsingGET = (props: GetAccountInfoUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfAccountDTO, void, GetAccountInfoUsingGETQueryParams, void>
    path={`/olokoservice/account/account`}
    
    {...props}
  />
);

export type UseGetAccountInfoUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfAccountDTO, void, GetAccountInfoUsingGETQueryParams, void>, "path">;

/**
 * getAccountInfo
 */
export const useGetAccountInfoUsingGET = (props: UseGetAccountInfoUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfAccountDTO, void, GetAccountInfoUsingGETQueryParams, void>(`/olokoservice/account/account`, props);


export type GetCurrentAccountUsingGETProps = Omit<GetProps<ResponseDTOOfAccountDTO, void, void, void>, "path">;

/**
 * getCurrentAccount
 */
export const GetCurrentAccountUsingGET = (props: GetCurrentAccountUsingGETProps) => (
  <Get<ResponseDTOOfAccountDTO, void, void, void>
    path={`/olokoservice/account/current`}
    
    {...props}
  />
);

export type UseGetCurrentAccountUsingGETProps = Omit<UseGetProps<ResponseDTOOfAccountDTO, void, void, void>, "path">;

/**
 * getCurrentAccount
 */
export const useGetCurrentAccountUsingGET = (props: UseGetCurrentAccountUsingGETProps) => useGet<ResponseDTOOfAccountDTO, void, void, void>(`/olokoservice/account/current`, props);


export type UpdateAccountUsingPUTProps = Omit<MutateProps<ResponseDTOOfAccountDTO | void, void, void, UpsertAccountRequestDTO, void>, "path" | "verb">;

/**
 * updateAccount
 */
export const UpdateAccountUsingPUT = (props: UpdateAccountUsingPUTProps) => (
  <Mutate<ResponseDTOOfAccountDTO | void, void, void, UpsertAccountRequestDTO, void>
    verb="PUT"
    path={`/olokoservice/account/current`}
    
    {...props}
  />
);

export type UseUpdateAccountUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfAccountDTO | void, void, void, UpsertAccountRequestDTO, void>, "path" | "verb">;

/**
 * updateAccount
 */
export const useUpdateAccountUsingPUT = (props: UseUpdateAccountUsingPUTProps) => useMutate<ResponseDTOOfAccountDTO | void, void, void, UpsertAccountRequestDTO, void>("PUT", `/olokoservice/account/current`, props);


export interface GetAccountUserAuthorityUsingGETQueryParams {
  /**
   * departmentBizId
   */
  departmentBizId?: string;
  /**
   * name
   */
  name?: string;
  /**
   * userAuthorityName
   */
  userAuthorityName?: string;
}

export type GetAccountUserAuthorityUsingGETProps = Omit<GetProps<ResponseDTOOfListOfAccountUserDTO, void, GetAccountUserAuthorityUsingGETQueryParams, void>, "path">;

/**
 * getAccountUserAuthority
 */
export const GetAccountUserAuthorityUsingGET = (props: GetAccountUserAuthorityUsingGETProps) => (
  <Get<ResponseDTOOfListOfAccountUserDTO, void, GetAccountUserAuthorityUsingGETQueryParams, void>
    path={`/olokoservice/account/current/account/users/authority`}
    
    {...props}
  />
);

export type UseGetAccountUserAuthorityUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfAccountUserDTO, void, GetAccountUserAuthorityUsingGETQueryParams, void>, "path">;

/**
 * getAccountUserAuthority
 */
export const useGetAccountUserAuthorityUsingGET = (props: UseGetAccountUserAuthorityUsingGETProps) => useGet<ResponseDTOOfListOfAccountUserDTO, void, GetAccountUserAuthorityUsingGETQueryParams, void>(`/olokoservice/account/current/account/users/authority`, props);


export interface GetAccountUsersUsingGETQueryParams {
  /**
   * name
   */
  name?: string;
}

export interface GetAccountUsersUsingGETPathParams {
  /**
   * auditStatus
   */
  auditStatus: boolean
}

export type GetAccountUsersUsingGETProps = Omit<GetProps<ResponseDTOOfListOfAccountUserDTO, void, GetAccountUsersUsingGETQueryParams, GetAccountUsersUsingGETPathParams>, "path"> & GetAccountUsersUsingGETPathParams;

/**
 * getAccountUsers
 */
export const GetAccountUsersUsingGET = ({auditStatus, ...props}: GetAccountUsersUsingGETProps) => (
  <Get<ResponseDTOOfListOfAccountUserDTO, void, GetAccountUsersUsingGETQueryParams, GetAccountUsersUsingGETPathParams>
    path={`/olokoservice/account/current/account/users/${auditStatus}`}
    
    {...props}
  />
);

export type UseGetAccountUsersUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfAccountUserDTO, void, GetAccountUsersUsingGETQueryParams, GetAccountUsersUsingGETPathParams>, "path"> & GetAccountUsersUsingGETPathParams;

/**
 * getAccountUsers
 */
export const useGetAccountUsersUsingGET = ({auditStatus, ...props}: UseGetAccountUsersUsingGETProps) => useGet<ResponseDTOOfListOfAccountUserDTO, void, GetAccountUsersUsingGETQueryParams, GetAccountUsersUsingGETPathParams>((paramsInPath: GetAccountUsersUsingGETPathParams) => `/olokoservice/account/current/account/users/${paramsInPath.auditStatus}`, {  pathParams: { auditStatus }, ...props });


export interface AddUserToAccountAuditUsingPOSTQueryParams {
  /**
   * accountBizId
   */
  accountBizId: string;
}

export type AddUserToAccountAuditUsingPOSTProps = Omit<MutateProps<ResponseDTOOfAccountUserAuthorityDTO | void, void, AddUserToAccountAuditUsingPOSTQueryParams, void, void>, "path" | "verb">;

/**
 * addUserToAccountAudit
 */
export const AddUserToAccountAuditUsingPOST = (props: AddUserToAccountAuditUsingPOSTProps) => (
  <Mutate<ResponseDTOOfAccountUserAuthorityDTO | void, void, AddUserToAccountAuditUsingPOSTQueryParams, void, void>
    verb="POST"
    path={`/olokoservice/account/current/audit`}
    
    {...props}
  />
);

export type UseAddUserToAccountAuditUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfAccountUserAuthorityDTO | void, void, AddUserToAccountAuditUsingPOSTQueryParams, void, void>, "path" | "verb">;

/**
 * addUserToAccountAudit
 */
export const useAddUserToAccountAuditUsingPOST = (props: UseAddUserToAccountAuditUsingPOSTProps) => useMutate<ResponseDTOOfAccountUserAuthorityDTO | void, void, AddUserToAccountAuditUsingPOSTQueryParams, void, void>("POST", `/olokoservice/account/current/audit`, props);


export interface UserToAccountAuditPassUsingPUTQueryParams {
  /**
   * userBizId
   */
  userBizId: string;
}

export type UserToAccountAuditPassUsingPUTProps = Omit<MutateProps<ResponseDTOOfAccountUserAuthorityDTO | void, void, UserToAccountAuditPassUsingPUTQueryParams, void, void>, "path" | "verb">;

/**
 * userToAccountAuditPass
 */
export const UserToAccountAuditPassUsingPUT = (props: UserToAccountAuditPassUsingPUTProps) => (
  <Mutate<ResponseDTOOfAccountUserAuthorityDTO | void, void, UserToAccountAuditPassUsingPUTQueryParams, void, void>
    verb="PUT"
    path={`/olokoservice/account/current/audit/pass`}
    
    {...props}
  />
);

export type UseUserToAccountAuditPassUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfAccountUserAuthorityDTO | void, void, UserToAccountAuditPassUsingPUTQueryParams, void, void>, "path" | "verb">;

/**
 * userToAccountAuditPass
 */
export const useUserToAccountAuditPassUsingPUT = (props: UseUserToAccountAuditPassUsingPUTProps) => useMutate<ResponseDTOOfAccountUserAuthorityDTO | void, void, UserToAccountAuditPassUsingPUTQueryParams, void, void>("PUT", `/olokoservice/account/current/audit/pass`, props);


export interface UserToAccountAuditRefuseUsingPUTQueryParams {
  /**
   * userBizId
   */
  userBizId: string;
}

export type UserToAccountAuditRefuseUsingPUTProps = Omit<MutateProps<ResponseDTO | void, void, UserToAccountAuditRefuseUsingPUTQueryParams, void, void>, "path" | "verb">;

/**
 * userToAccountAuditRefuse
 */
export const UserToAccountAuditRefuseUsingPUT = (props: UserToAccountAuditRefuseUsingPUTProps) => (
  <Mutate<ResponseDTO | void, void, UserToAccountAuditRefuseUsingPUTQueryParams, void, void>
    verb="PUT"
    path={`/olokoservice/account/current/audit/refuse`}
    
    {...props}
  />
);

export type UseUserToAccountAuditRefuseUsingPUTProps = Omit<UseMutateProps<ResponseDTO | void, void, UserToAccountAuditRefuseUsingPUTQueryParams, void, void>, "path" | "verb">;

/**
 * userToAccountAuditRefuse
 */
export const useUserToAccountAuditRefuseUsingPUT = (props: UseUserToAccountAuditRefuseUsingPUTProps) => useMutate<ResponseDTO | void, void, UserToAccountAuditRefuseUsingPUTQueryParams, void, void>("PUT", `/olokoservice/account/current/audit/refuse`, props);


export interface AddUserToAccountUsingPOSTQueryParams {
  /**
   * mobile
   */
  mobile: string;
}

export type AddUserToAccountUsingPOSTProps = Omit<MutateProps<ResponseDTOOfAccountUserAuthorityDTO | void, void, AddUserToAccountUsingPOSTQueryParams, void, void>, "path" | "verb">;

/**
 * addUserToAccount
 */
export const AddUserToAccountUsingPOST = (props: AddUserToAccountUsingPOSTProps) => (
  <Mutate<ResponseDTOOfAccountUserAuthorityDTO | void, void, AddUserToAccountUsingPOSTQueryParams, void, void>
    verb="POST"
    path={`/olokoservice/account/current/user/account`}
    
    {...props}
  />
);

export type UseAddUserToAccountUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfAccountUserAuthorityDTO | void, void, AddUserToAccountUsingPOSTQueryParams, void, void>, "path" | "verb">;

/**
 * addUserToAccount
 */
export const useAddUserToAccountUsingPOST = (props: UseAddUserToAccountUsingPOSTProps) => useMutate<ResponseDTOOfAccountUserAuthorityDTO | void, void, AddUserToAccountUsingPOSTQueryParams, void, void>("POST", `/olokoservice/account/current/user/account`, props);


export interface GetUserAccountAuthorityUsingGETPathParams {
  /**
   * userBizId
   */
  userBizId: string
}

export type GetUserAccountAuthorityUsingGETProps = Omit<GetProps<ResponseDTOOfAccountUserAuthorityDTO, void, void, GetUserAccountAuthorityUsingGETPathParams>, "path"> & GetUserAccountAuthorityUsingGETPathParams;

/**
 * getUserAccountAuthority
 */
export const GetUserAccountAuthorityUsingGET = ({userBizId, ...props}: GetUserAccountAuthorityUsingGETProps) => (
  <Get<ResponseDTOOfAccountUserAuthorityDTO, void, void, GetUserAccountAuthorityUsingGETPathParams>
    path={`/olokoservice/account/current/user/${userBizId}/authority`}
    
    {...props}
  />
);

export type UseGetUserAccountAuthorityUsingGETProps = Omit<UseGetProps<ResponseDTOOfAccountUserAuthorityDTO, void, void, GetUserAccountAuthorityUsingGETPathParams>, "path"> & GetUserAccountAuthorityUsingGETPathParams;

/**
 * getUserAccountAuthority
 */
export const useGetUserAccountAuthorityUsingGET = ({userBizId, ...props}: UseGetUserAccountAuthorityUsingGETProps) => useGet<ResponseDTOOfAccountUserAuthorityDTO, void, void, GetUserAccountAuthorityUsingGETPathParams>((paramsInPath: GetUserAccountAuthorityUsingGETPathParams) => `/olokoservice/account/current/user/${paramsInPath.userBizId}/authority`, {  pathParams: { userBizId }, ...props });


export interface RemoveUserFromAccountUsingPUTPathParams {
  /**
   * userBizId
   */
  userBizId: string
}

export type RemoveUserFromAccountUsingPUTProps = Omit<MutateProps<ResponseDTO | void, void, void, void, RemoveUserFromAccountUsingPUTPathParams>, "path" | "verb"> & RemoveUserFromAccountUsingPUTPathParams;

/**
 * removeUserFromAccount
 */
export const RemoveUserFromAccountUsingPUT = ({userBizId, ...props}: RemoveUserFromAccountUsingPUTProps) => (
  <Mutate<ResponseDTO | void, void, void, void, RemoveUserFromAccountUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/account/current/user/${userBizId}/delete`}
    
    {...props}
  />
);

export type UseRemoveUserFromAccountUsingPUTProps = Omit<UseMutateProps<ResponseDTO | void, void, void, void, RemoveUserFromAccountUsingPUTPathParams>, "path" | "verb"> & RemoveUserFromAccountUsingPUTPathParams;

/**
 * removeUserFromAccount
 */
export const useRemoveUserFromAccountUsingPUT = ({userBizId, ...props}: UseRemoveUserFromAccountUsingPUTProps) => useMutate<ResponseDTO | void, void, void, void, RemoveUserFromAccountUsingPUTPathParams>("PUT", (paramsInPath: RemoveUserFromAccountUsingPUTPathParams) => `/olokoservice/account/current/user/${paramsInPath.userBizId}/delete`, {  pathParams: { userBizId }, ...props });


export interface UpdateAccountAuthorityUsingPUTQueryParams {
  /**
   * authorityBizId
   */
  authorityBizId: string;
}

export interface UpdateAccountAuthorityUsingPUTPathParams {
  /**
   * userBizId
   */
  userBizId: string
}

export type UpdateAccountAuthorityUsingPUTProps = Omit<MutateProps<ResponseDTOOfAccountUserAuthorityDTO | void, void, UpdateAccountAuthorityUsingPUTQueryParams, void, UpdateAccountAuthorityUsingPUTPathParams>, "path" | "verb"> & UpdateAccountAuthorityUsingPUTPathParams;

/**
 * updateAccountAuthority
 */
export const UpdateAccountAuthorityUsingPUT = ({userBizId, ...props}: UpdateAccountAuthorityUsingPUTProps) => (
  <Mutate<ResponseDTOOfAccountUserAuthorityDTO | void, void, UpdateAccountAuthorityUsingPUTQueryParams, void, UpdateAccountAuthorityUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/account/current/user/${userBizId}/update`}
    
    {...props}
  />
);

export type UseUpdateAccountAuthorityUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfAccountUserAuthorityDTO | void, void, UpdateAccountAuthorityUsingPUTQueryParams, void, UpdateAccountAuthorityUsingPUTPathParams>, "path" | "verb"> & UpdateAccountAuthorityUsingPUTPathParams;

/**
 * updateAccountAuthority
 */
export const useUpdateAccountAuthorityUsingPUT = ({userBizId, ...props}: UseUpdateAccountAuthorityUsingPUTProps) => useMutate<ResponseDTOOfAccountUserAuthorityDTO | void, void, UpdateAccountAuthorityUsingPUTQueryParams, void, UpdateAccountAuthorityUsingPUTPathParams>("PUT", (paramsInPath: UpdateAccountAuthorityUsingPUTPathParams) => `/olokoservice/account/current/user/${paramsInPath.userBizId}/update`, {  pathParams: { userBizId }, ...props });


export interface GetAccountUsingGETQueryParams {
  /**
   * userBizId
   */
  userBizId?: string;
}

export interface GetAccountUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetAccountUsingGETProps = Omit<GetProps<ResponseDTOOfAccountDTO, void, GetAccountUsingGETQueryParams, GetAccountUsingGETPathParams>, "path"> & GetAccountUsingGETPathParams;

/**
 * getAccount
 */
export const GetAccountUsingGET = ({bizId, ...props}: GetAccountUsingGETProps) => (
  <Get<ResponseDTOOfAccountDTO, void, GetAccountUsingGETQueryParams, GetAccountUsingGETPathParams>
    path={`/olokoservice/account/${bizId}`}
    
    {...props}
  />
);

export type UseGetAccountUsingGETProps = Omit<UseGetProps<ResponseDTOOfAccountDTO, void, GetAccountUsingGETQueryParams, GetAccountUsingGETPathParams>, "path"> & GetAccountUsingGETPathParams;

/**
 * getAccount
 */
export const useGetAccountUsingGET = ({bizId, ...props}: UseGetAccountUsingGETProps) => useGet<ResponseDTOOfAccountDTO, void, GetAccountUsingGETQueryParams, GetAccountUsingGETPathParams>((paramsInPath: GetAccountUsingGETPathParams) => `/olokoservice/account/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface GetBoxsUsingGETQueryParams {
  /**
   * boxCode
   */
  boxCode?: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
}

export type GetBoxsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfBoxDTO, void, GetBoxsUsingGETQueryParams, void>, "path">;

/**
 * getBoxs
 */
export const GetBoxsUsingGET = (props: GetBoxsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfBoxDTO, void, GetBoxsUsingGETQueryParams, void>
    path={`/olokoservice/box`}
    
    {...props}
  />
);

export type UseGetBoxsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfBoxDTO, void, GetBoxsUsingGETQueryParams, void>, "path">;

/**
 * getBoxs
 */
export const useGetBoxsUsingGET = (props: UseGetBoxsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfBoxDTO, void, GetBoxsUsingGETQueryParams, void>(`/olokoservice/box`, props);


export type CreateBoxUsingPOSTProps = Omit<MutateProps<ResponseDTOOfBoxDTO | void, void, void, UpsertBoxRequestDTO, void>, "path" | "verb">;

/**
 * createBox
 */
export const CreateBoxUsingPOST = (props: CreateBoxUsingPOSTProps) => (
  <Mutate<ResponseDTOOfBoxDTO | void, void, void, UpsertBoxRequestDTO, void>
    verb="POST"
    path={`/olokoservice/box`}
    
    {...props}
  />
);

export type UseCreateBoxUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfBoxDTO | void, void, void, UpsertBoxRequestDTO, void>, "path" | "verb">;

/**
 * createBox
 */
export const useCreateBoxUsingPOST = (props: UseCreateBoxUsingPOSTProps) => useMutate<ResponseDTOOfBoxDTO | void, void, void, UpsertBoxRequestDTO, void>("POST", `/olokoservice/box`, props);


export interface GetBoxUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetBoxUsingGETProps = Omit<GetProps<ResponseDTOOfBoxDTO, void, void, GetBoxUsingGETPathParams>, "path"> & GetBoxUsingGETPathParams;

/**
 * getBox
 */
export const GetBoxUsingGET = ({bizId, ...props}: GetBoxUsingGETProps) => (
  <Get<ResponseDTOOfBoxDTO, void, void, GetBoxUsingGETPathParams>
    path={`/olokoservice/box/${bizId}`}
    
    {...props}
  />
);

export type UseGetBoxUsingGETProps = Omit<UseGetProps<ResponseDTOOfBoxDTO, void, void, GetBoxUsingGETPathParams>, "path"> & GetBoxUsingGETPathParams;

/**
 * getBox
 */
export const useGetBoxUsingGET = ({bizId, ...props}: UseGetBoxUsingGETProps) => useGet<ResponseDTOOfBoxDTO, void, void, GetBoxUsingGETPathParams>((paramsInPath: GetBoxUsingGETPathParams) => `/olokoservice/box/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateBoxUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateBoxUsingPUTProps = Omit<MutateProps<ResponseDTOOfBoxDTO | void, void, void, UpsertBoxRequestDTO, UpdateBoxUsingPUTPathParams>, "path" | "verb"> & UpdateBoxUsingPUTPathParams;

/**
 * updateBox
 */
export const UpdateBoxUsingPUT = ({bizId, ...props}: UpdateBoxUsingPUTProps) => (
  <Mutate<ResponseDTOOfBoxDTO | void, void, void, UpsertBoxRequestDTO, UpdateBoxUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/box/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateBoxUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfBoxDTO | void, void, void, UpsertBoxRequestDTO, UpdateBoxUsingPUTPathParams>, "path" | "verb"> & UpdateBoxUsingPUTPathParams;

/**
 * updateBox
 */
export const useUpdateBoxUsingPUT = ({bizId, ...props}: UseUpdateBoxUsingPUTProps) => useMutate<ResponseDTOOfBoxDTO | void, void, void, UpsertBoxRequestDTO, UpdateBoxUsingPUTPathParams>("PUT", (paramsInPath: UpdateBoxUsingPUTPathParams) => `/olokoservice/box/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteBoxUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteBoxUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteBoxUsingPUTPathParams>, "path" | "verb"> & DeleteBoxUsingPUTPathParams;

/**
 * deleteBox
 */
export const DeleteBoxUsingPUT = ({bizId, ...props}: DeleteBoxUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteBoxUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/box/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteBoxUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteBoxUsingPUTPathParams>, "path" | "verb"> & DeleteBoxUsingPUTPathParams;

/**
 * deleteBox
 */
export const useDeleteBoxUsingPUT = ({bizId, ...props}: UseDeleteBoxUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteBoxUsingPUTPathParams>("PUT", (paramsInPath: DeleteBoxUsingPUTPathParams) => `/olokoservice/box/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface GetConsumeLogsUsingGETQueryParams {
  /**
   * bizId
   */
  bizId?: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
  /**
   * updatedAt
   */
  updatedAt?: string;
}

export type GetConsumeLogsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfConsumeLogDTO, void, GetConsumeLogsUsingGETQueryParams, void>, "path">;

/**
 * getConsumeLogs
 */
export const GetConsumeLogsUsingGET = (props: GetConsumeLogsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfConsumeLogDTO, void, GetConsumeLogsUsingGETQueryParams, void>
    path={`/olokoservice/consumeLog`}
    
    {...props}
  />
);

export type UseGetConsumeLogsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfConsumeLogDTO, void, GetConsumeLogsUsingGETQueryParams, void>, "path">;

/**
 * getConsumeLogs
 */
export const useGetConsumeLogsUsingGET = (props: UseGetConsumeLogsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfConsumeLogDTO, void, GetConsumeLogsUsingGETQueryParams, void>(`/olokoservice/consumeLog`, props);


export type CreateConsumeLogUsingPOSTProps = Omit<MutateProps<ResponseDTOOfstring | void, void, void, UpsertConsumeLogRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createConsumeLog
 */
export const CreateConsumeLogUsingPOST = (props: CreateConsumeLogUsingPOSTProps) => (
  <Mutate<ResponseDTOOfstring | void, void, void, UpsertConsumeLogRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/consumeLog`}
    
    {...props}
  />
);

export type UseCreateConsumeLogUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfstring | void, void, void, UpsertConsumeLogRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createConsumeLog
 */
export const useCreateConsumeLogUsingPOST = (props: UseCreateConsumeLogUsingPOSTProps) => useMutate<ResponseDTOOfstring | void, void, void, UpsertConsumeLogRequestDTORequestBody, void>("POST", `/olokoservice/consumeLog`, props);


export interface GetConsumeLog1UsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetConsumeLog1UsingGETProps = Omit<GetProps<ResponseDTOOfConsumeLogDTO, void, void, GetConsumeLog1UsingGETPathParams>, "path"> & GetConsumeLog1UsingGETPathParams;

/**
 * getConsumeLog1
 */
export const GetConsumeLog1UsingGET = ({bizId, ...props}: GetConsumeLog1UsingGETProps) => (
  <Get<ResponseDTOOfConsumeLogDTO, void, void, GetConsumeLog1UsingGETPathParams>
    path={`/olokoservice/consumeLog/${bizId}`}
    
    {...props}
  />
);

export type UseGetConsumeLog1UsingGETProps = Omit<UseGetProps<ResponseDTOOfConsumeLogDTO, void, void, GetConsumeLog1UsingGETPathParams>, "path"> & GetConsumeLog1UsingGETPathParams;

/**
 * getConsumeLog1
 */
export const useGetConsumeLog1UsingGET = ({bizId, ...props}: UseGetConsumeLog1UsingGETProps) => useGet<ResponseDTOOfConsumeLogDTO, void, void, GetConsumeLog1UsingGETPathParams>((paramsInPath: GetConsumeLog1UsingGETPathParams) => `/olokoservice/consumeLog/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateConsumeLogUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateConsumeLogUsingPUTProps = Omit<MutateProps<ResponseDTOOfConsumeLogDTO | void, void, void, UpsertConsumeLogRequestDTORequestBody, UpdateConsumeLogUsingPUTPathParams>, "path" | "verb"> & UpdateConsumeLogUsingPUTPathParams;

/**
 * updateConsumeLog
 */
export const UpdateConsumeLogUsingPUT = ({bizId, ...props}: UpdateConsumeLogUsingPUTProps) => (
  <Mutate<ResponseDTOOfConsumeLogDTO | void, void, void, UpsertConsumeLogRequestDTORequestBody, UpdateConsumeLogUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/consumeLog/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateConsumeLogUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfConsumeLogDTO | void, void, void, UpsertConsumeLogRequestDTORequestBody, UpdateConsumeLogUsingPUTPathParams>, "path" | "verb"> & UpdateConsumeLogUsingPUTPathParams;

/**
 * updateConsumeLog
 */
export const useUpdateConsumeLogUsingPUT = ({bizId, ...props}: UseUpdateConsumeLogUsingPUTProps) => useMutate<ResponseDTOOfConsumeLogDTO | void, void, void, UpsertConsumeLogRequestDTORequestBody, UpdateConsumeLogUsingPUTPathParams>("PUT", (paramsInPath: UpdateConsumeLogUsingPUTPathParams) => `/olokoservice/consumeLog/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface GetCustomDomainObjectsUsingGETQueryParams {
  /**
   * customDomainObjectTemplateBizName
   */
  customDomainObjectTemplateBizName?: string;
  /**
   * customQuery
   */
  customQuery?: string;
  /**
   * displayName
   */
  displayName?: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
}

export type GetCustomDomainObjectsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectDTO, void, GetCustomDomainObjectsUsingGETQueryParams, void>, "path">;

/**
 * getCustomDomainObjects
 */
export const GetCustomDomainObjectsUsingGET = (props: GetCustomDomainObjectsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectDTO, void, GetCustomDomainObjectsUsingGETQueryParams, void>
    path={`/olokoservice/custom-domain-object`}
    
    {...props}
  />
);

export type UseGetCustomDomainObjectsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectDTO, void, GetCustomDomainObjectsUsingGETQueryParams, void>, "path">;

/**
 * getCustomDomainObjects
 */
export const useGetCustomDomainObjectsUsingGET = (props: UseGetCustomDomainObjectsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectDTO, void, GetCustomDomainObjectsUsingGETQueryParams, void>(`/olokoservice/custom-domain-object`, props);


export type CreateCustomDomainObjectUsingPOSTProps = Omit<MutateProps<ResponseDTOOfCustomDomainObjectDTO | void, void, void, UpsertCustomDomainObjectRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createCustomDomainObject
 */
export const CreateCustomDomainObjectUsingPOST = (props: CreateCustomDomainObjectUsingPOSTProps) => (
  <Mutate<ResponseDTOOfCustomDomainObjectDTO | void, void, void, UpsertCustomDomainObjectRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/custom-domain-object`}
    
    {...props}
  />
);

export type UseCreateCustomDomainObjectUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfCustomDomainObjectDTO | void, void, void, UpsertCustomDomainObjectRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createCustomDomainObject
 */
export const useCreateCustomDomainObjectUsingPOST = (props: UseCreateCustomDomainObjectUsingPOSTProps) => useMutate<ResponseDTOOfCustomDomainObjectDTO | void, void, void, UpsertCustomDomainObjectRequestDTORequestBody, void>("POST", `/olokoservice/custom-domain-object`, props);


export interface GetCustomDomainTemplatesUsingGETQueryParams {
  /**
   * bizName
   */
  bizName?: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
}

export type GetCustomDomainTemplatesUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectTemplateDTO, void, GetCustomDomainTemplatesUsingGETQueryParams, void>, "path">;

/**
 * getCustomDomainTemplates
 */
export const GetCustomDomainTemplatesUsingGET = (props: GetCustomDomainTemplatesUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectTemplateDTO, void, GetCustomDomainTemplatesUsingGETQueryParams, void>
    path={`/olokoservice/custom-domain-object-template`}
    
    {...props}
  />
);

export type UseGetCustomDomainTemplatesUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectTemplateDTO, void, GetCustomDomainTemplatesUsingGETQueryParams, void>, "path">;

/**
 * getCustomDomainTemplates
 */
export const useGetCustomDomainTemplatesUsingGET = (props: UseGetCustomDomainTemplatesUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfCustomDomainObjectTemplateDTO, void, GetCustomDomainTemplatesUsingGETQueryParams, void>(`/olokoservice/custom-domain-object-template`, props);


export type CreateCustomDomainTemplateUsingPOSTProps = Omit<MutateProps<ResponseDTOOfCustomDomainObjectTemplateDTO | void, void, void, UpsertCustomDomainObjectTemplateRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createCustomDomainTemplate
 */
export const CreateCustomDomainTemplateUsingPOST = (props: CreateCustomDomainTemplateUsingPOSTProps) => (
  <Mutate<ResponseDTOOfCustomDomainObjectTemplateDTO | void, void, void, UpsertCustomDomainObjectTemplateRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/custom-domain-object-template`}
    
    {...props}
  />
);

export type UseCreateCustomDomainTemplateUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfCustomDomainObjectTemplateDTO | void, void, void, UpsertCustomDomainObjectTemplateRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createCustomDomainTemplate
 */
export const useCreateCustomDomainTemplateUsingPOST = (props: UseCreateCustomDomainTemplateUsingPOSTProps) => useMutate<ResponseDTOOfCustomDomainObjectTemplateDTO | void, void, void, UpsertCustomDomainObjectTemplateRequestDTORequestBody, void>("POST", `/olokoservice/custom-domain-object-template`, props);


export interface GetCustomDomainTemplateUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetCustomDomainTemplateUsingGETProps = Omit<GetProps<ResponseDTOOfCustomDomainObjectTemplateDTO, void, void, GetCustomDomainTemplateUsingGETPathParams>, "path"> & GetCustomDomainTemplateUsingGETPathParams;

/**
 * getCustomDomainTemplate
 */
export const GetCustomDomainTemplateUsingGET = ({bizId, ...props}: GetCustomDomainTemplateUsingGETProps) => (
  <Get<ResponseDTOOfCustomDomainObjectTemplateDTO, void, void, GetCustomDomainTemplateUsingGETPathParams>
    path={`/olokoservice/custom-domain-object-template/${bizId}`}
    
    {...props}
  />
);

export type UseGetCustomDomainTemplateUsingGETProps = Omit<UseGetProps<ResponseDTOOfCustomDomainObjectTemplateDTO, void, void, GetCustomDomainTemplateUsingGETPathParams>, "path"> & GetCustomDomainTemplateUsingGETPathParams;

/**
 * getCustomDomainTemplate
 */
export const useGetCustomDomainTemplateUsingGET = ({bizId, ...props}: UseGetCustomDomainTemplateUsingGETProps) => useGet<ResponseDTOOfCustomDomainObjectTemplateDTO, void, void, GetCustomDomainTemplateUsingGETPathParams>((paramsInPath: GetCustomDomainTemplateUsingGETPathParams) => `/olokoservice/custom-domain-object-template/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateCustomDomainTemplateUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateCustomDomainTemplateUsingPUTProps = Omit<MutateProps<ResponseDTOOfCustomDomainObjectTemplateDTO | void, void, void, UpsertCustomDomainObjectTemplateRequestDTORequestBody, UpdateCustomDomainTemplateUsingPUTPathParams>, "path" | "verb"> & UpdateCustomDomainTemplateUsingPUTPathParams;

/**
 * updateCustomDomainTemplate
 */
export const UpdateCustomDomainTemplateUsingPUT = ({bizId, ...props}: UpdateCustomDomainTemplateUsingPUTProps) => (
  <Mutate<ResponseDTOOfCustomDomainObjectTemplateDTO | void, void, void, UpsertCustomDomainObjectTemplateRequestDTORequestBody, UpdateCustomDomainTemplateUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/custom-domain-object-template/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateCustomDomainTemplateUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfCustomDomainObjectTemplateDTO | void, void, void, UpsertCustomDomainObjectTemplateRequestDTORequestBody, UpdateCustomDomainTemplateUsingPUTPathParams>, "path" | "verb"> & UpdateCustomDomainTemplateUsingPUTPathParams;

/**
 * updateCustomDomainTemplate
 */
export const useUpdateCustomDomainTemplateUsingPUT = ({bizId, ...props}: UseUpdateCustomDomainTemplateUsingPUTProps) => useMutate<ResponseDTOOfCustomDomainObjectTemplateDTO | void, void, void, UpsertCustomDomainObjectTemplateRequestDTORequestBody, UpdateCustomDomainTemplateUsingPUTPathParams>("PUT", (paramsInPath: UpdateCustomDomainTemplateUsingPUTPathParams) => `/olokoservice/custom-domain-object-template/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteCustomDomainTemplateUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteCustomDomainTemplateUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteCustomDomainTemplateUsingPUTPathParams>, "path" | "verb"> & DeleteCustomDomainTemplateUsingPUTPathParams;

/**
 * deleteCustomDomainTemplate
 */
export const DeleteCustomDomainTemplateUsingPUT = ({bizId, ...props}: DeleteCustomDomainTemplateUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteCustomDomainTemplateUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/custom-domain-object-template/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteCustomDomainTemplateUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteCustomDomainTemplateUsingPUTPathParams>, "path" | "verb"> & DeleteCustomDomainTemplateUsingPUTPathParams;

/**
 * deleteCustomDomainTemplate
 */
export const useDeleteCustomDomainTemplateUsingPUT = ({bizId, ...props}: UseDeleteCustomDomainTemplateUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteCustomDomainTemplateUsingPUTPathParams>("PUT", (paramsInPath: DeleteCustomDomainTemplateUsingPUTPathParams) => `/olokoservice/custom-domain-object-template/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface BatchGetCustomDomainObjectUsingGETQueryParams {
  /**
   * bizIds
   */
  bizIds: string;
}

export type BatchGetCustomDomainObjectUsingGETProps = Omit<GetProps<ResponseDTOOfListOfCustomDomainObjectDTO, void, BatchGetCustomDomainObjectUsingGETQueryParams, void>, "path">;

/**
 * batchGetCustomDomainObject
 */
export const BatchGetCustomDomainObjectUsingGET = (props: BatchGetCustomDomainObjectUsingGETProps) => (
  <Get<ResponseDTOOfListOfCustomDomainObjectDTO, void, BatchGetCustomDomainObjectUsingGETQueryParams, void>
    path={`/olokoservice/custom-domain-object/batchGet`}
    
    {...props}
  />
);

export type UseBatchGetCustomDomainObjectUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfCustomDomainObjectDTO, void, BatchGetCustomDomainObjectUsingGETQueryParams, void>, "path">;

/**
 * batchGetCustomDomainObject
 */
export const useBatchGetCustomDomainObjectUsingGET = (props: UseBatchGetCustomDomainObjectUsingGETProps) => useGet<ResponseDTOOfListOfCustomDomainObjectDTO, void, BatchGetCustomDomainObjectUsingGETQueryParams, void>(`/olokoservice/custom-domain-object/batchGet`, props);


export interface GetCustomDomainObjectUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetCustomDomainObjectUsingGETProps = Omit<GetProps<ResponseDTOOfCustomDomainObjectDTO, void, void, GetCustomDomainObjectUsingGETPathParams>, "path"> & GetCustomDomainObjectUsingGETPathParams;

/**
 * getCustomDomainObject
 */
export const GetCustomDomainObjectUsingGET = ({bizId, ...props}: GetCustomDomainObjectUsingGETProps) => (
  <Get<ResponseDTOOfCustomDomainObjectDTO, void, void, GetCustomDomainObjectUsingGETPathParams>
    path={`/olokoservice/custom-domain-object/${bizId}`}
    
    {...props}
  />
);

export type UseGetCustomDomainObjectUsingGETProps = Omit<UseGetProps<ResponseDTOOfCustomDomainObjectDTO, void, void, GetCustomDomainObjectUsingGETPathParams>, "path"> & GetCustomDomainObjectUsingGETPathParams;

/**
 * getCustomDomainObject
 */
export const useGetCustomDomainObjectUsingGET = ({bizId, ...props}: UseGetCustomDomainObjectUsingGETProps) => useGet<ResponseDTOOfCustomDomainObjectDTO, void, void, GetCustomDomainObjectUsingGETPathParams>((paramsInPath: GetCustomDomainObjectUsingGETPathParams) => `/olokoservice/custom-domain-object/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateCustomDomainObjectUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateCustomDomainObjectUsingPUTProps = Omit<MutateProps<ResponseDTOOfCustomDomainObjectDTO | void, void, void, UpsertCustomDomainObjectRequestDTORequestBody, UpdateCustomDomainObjectUsingPUTPathParams>, "path" | "verb"> & UpdateCustomDomainObjectUsingPUTPathParams;

/**
 * updateCustomDomainObject
 */
export const UpdateCustomDomainObjectUsingPUT = ({bizId, ...props}: UpdateCustomDomainObjectUsingPUTProps) => (
  <Mutate<ResponseDTOOfCustomDomainObjectDTO | void, void, void, UpsertCustomDomainObjectRequestDTORequestBody, UpdateCustomDomainObjectUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/custom-domain-object/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateCustomDomainObjectUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfCustomDomainObjectDTO | void, void, void, UpsertCustomDomainObjectRequestDTORequestBody, UpdateCustomDomainObjectUsingPUTPathParams>, "path" | "verb"> & UpdateCustomDomainObjectUsingPUTPathParams;

/**
 * updateCustomDomainObject
 */
export const useUpdateCustomDomainObjectUsingPUT = ({bizId, ...props}: UseUpdateCustomDomainObjectUsingPUTProps) => useMutate<ResponseDTOOfCustomDomainObjectDTO | void, void, void, UpsertCustomDomainObjectRequestDTORequestBody, UpdateCustomDomainObjectUsingPUTPathParams>("PUT", (paramsInPath: UpdateCustomDomainObjectUsingPUTPathParams) => `/olokoservice/custom-domain-object/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteCustomDomainObjectUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteCustomDomainObjectUsingPUTProps = Omit<MutateProps<ResponseDTO | void, void, void, void, DeleteCustomDomainObjectUsingPUTPathParams>, "path" | "verb"> & DeleteCustomDomainObjectUsingPUTPathParams;

/**
 * deleteCustomDomainObject
 */
export const DeleteCustomDomainObjectUsingPUT = ({bizId, ...props}: DeleteCustomDomainObjectUsingPUTProps) => (
  <Mutate<ResponseDTO | void, void, void, void, DeleteCustomDomainObjectUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/custom-domain-object/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteCustomDomainObjectUsingPUTProps = Omit<UseMutateProps<ResponseDTO | void, void, void, void, DeleteCustomDomainObjectUsingPUTPathParams>, "path" | "verb"> & DeleteCustomDomainObjectUsingPUTPathParams;

/**
 * deleteCustomDomainObject
 */
export const useDeleteCustomDomainObjectUsingPUT = ({bizId, ...props}: UseDeleteCustomDomainObjectUsingPUTProps) => useMutate<ResponseDTO | void, void, void, void, DeleteCustomDomainObjectUsingPUTPathParams>("PUT", (paramsInPath: DeleteCustomDomainObjectUsingPUTPathParams) => `/olokoservice/custom-domain-object/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface GitDamagesUsingGETQueryParams {
  /**
   * page
   */
  page?: number;
  /**
   * restaurantBizId
   */
  restaurantBizId?: string;
  /**
   * siz
   */
  siz?: number;
}

export type GitDamagesUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfDamageDTO, void, GitDamagesUsingGETQueryParams, void>, "path">;

/**
 * gitDamages
 */
export const GitDamagesUsingGET = (props: GitDamagesUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfDamageDTO, void, GitDamagesUsingGETQueryParams, void>
    path={`/olokoservice/damage`}
    
    {...props}
  />
);

export type UseGitDamagesUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfDamageDTO, void, GitDamagesUsingGETQueryParams, void>, "path">;

/**
 * gitDamages
 */
export const useGitDamagesUsingGET = (props: UseGitDamagesUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfDamageDTO, void, GitDamagesUsingGETQueryParams, void>(`/olokoservice/damage`, props);


export type CreateDamageUsingPOSTProps = Omit<MutateProps<ResponseDTOOfDamageDTO | void, void, void, UpsertDamageRequestDTO, void>, "path" | "verb">;

/**
 * createDamage
 */
export const CreateDamageUsingPOST = (props: CreateDamageUsingPOSTProps) => (
  <Mutate<ResponseDTOOfDamageDTO | void, void, void, UpsertDamageRequestDTO, void>
    verb="POST"
    path={`/olokoservice/damage`}
    
    {...props}
  />
);

export type UseCreateDamageUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfDamageDTO | void, void, void, UpsertDamageRequestDTO, void>, "path" | "verb">;

/**
 * createDamage
 */
export const useCreateDamageUsingPOST = (props: UseCreateDamageUsingPOSTProps) => useMutate<ResponseDTOOfDamageDTO | void, void, void, UpsertDamageRequestDTO, void>("POST", `/olokoservice/damage`, props);


export interface GitDamageUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GitDamageUsingGETProps = Omit<GetProps<ResponseDTOOfDamageDTO, void, void, GitDamageUsingGETPathParams>, "path"> & GitDamageUsingGETPathParams;

/**
 * gitDamage
 */
export const GitDamageUsingGET = ({bizId, ...props}: GitDamageUsingGETProps) => (
  <Get<ResponseDTOOfDamageDTO, void, void, GitDamageUsingGETPathParams>
    path={`/olokoservice/damage/${bizId}`}
    
    {...props}
  />
);

export type UseGitDamageUsingGETProps = Omit<UseGetProps<ResponseDTOOfDamageDTO, void, void, GitDamageUsingGETPathParams>, "path"> & GitDamageUsingGETPathParams;

/**
 * gitDamage
 */
export const useGitDamageUsingGET = ({bizId, ...props}: UseGitDamageUsingGETProps) => useGet<ResponseDTOOfDamageDTO, void, void, GitDamageUsingGETPathParams>((paramsInPath: GitDamageUsingGETPathParams) => `/olokoservice/damage/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateDamageUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateDamageUsingPUTProps = Omit<MutateProps<ResponseDTOOfDamageDTO | void, void, void, UpsertDamageRequestDTO, UpdateDamageUsingPUTPathParams>, "path" | "verb"> & UpdateDamageUsingPUTPathParams;

/**
 * updateDamage
 */
export const UpdateDamageUsingPUT = ({bizId, ...props}: UpdateDamageUsingPUTProps) => (
  <Mutate<ResponseDTOOfDamageDTO | void, void, void, UpsertDamageRequestDTO, UpdateDamageUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/damage/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateDamageUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfDamageDTO | void, void, void, UpsertDamageRequestDTO, UpdateDamageUsingPUTPathParams>, "path" | "verb"> & UpdateDamageUsingPUTPathParams;

/**
 * updateDamage
 */
export const useUpdateDamageUsingPUT = ({bizId, ...props}: UseUpdateDamageUsingPUTProps) => useMutate<ResponseDTOOfDamageDTO | void, void, void, UpsertDamageRequestDTO, UpdateDamageUsingPUTPathParams>("PUT", (paramsInPath: UpdateDamageUsingPUTPathParams) => `/olokoservice/damage/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteDamageUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteDamageUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteDamageUsingPUTPathParams>, "path" | "verb"> & DeleteDamageUsingPUTPathParams;

/**
 * deleteDamage
 */
export const DeleteDamageUsingPUT = ({bizId, ...props}: DeleteDamageUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteDamageUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/damage/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteDamageUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteDamageUsingPUTPathParams>, "path" | "verb"> & DeleteDamageUsingPUTPathParams;

/**
 * deleteDamage
 */
export const useDeleteDamageUsingPUT = ({bizId, ...props}: UseDeleteDamageUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteDamageUsingPUTPathParams>("PUT", (paramsInPath: DeleteDamageUsingPUTPathParams) => `/olokoservice/damage/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface GetDeliverGoodsUsingGETQueryParams {
  /**
   * orderReceiver
   */
  orderReceiver?: string;
  /**
   * page
   */
  page?: number;
  /**
   * shipmentRoute
   */
  shipmentRoute?: string;
  /**
   * size
   */
  size?: number;
}

export type GetDeliverGoodsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfDeliverGoodsDTO, void, GetDeliverGoodsUsingGETQueryParams, void>, "path">;

/**
 * getDeliverGoods
 */
export const GetDeliverGoodsUsingGET = (props: GetDeliverGoodsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfDeliverGoodsDTO, void, GetDeliverGoodsUsingGETQueryParams, void>
    path={`/olokoservice/deliverGoods`}
    
    {...props}
  />
);

export type UseGetDeliverGoodsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfDeliverGoodsDTO, void, GetDeliverGoodsUsingGETQueryParams, void>, "path">;

/**
 * getDeliverGoods
 */
export const useGetDeliverGoodsUsingGET = (props: UseGetDeliverGoodsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfDeliverGoodsDTO, void, GetDeliverGoodsUsingGETQueryParams, void>(`/olokoservice/deliverGoods`, props);


export type CreateDeliverGoodUsingPOSTProps = Omit<MutateProps<ResponseDTOOfDeliverGoodsDTO | void, void, void, UpsertDeliverGoodsDTORequestBody, void>, "path" | "verb">;

/**
 * createDeliverGood
 */
export const CreateDeliverGoodUsingPOST = (props: CreateDeliverGoodUsingPOSTProps) => (
  <Mutate<ResponseDTOOfDeliverGoodsDTO | void, void, void, UpsertDeliverGoodsDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/deliverGoods`}
    
    {...props}
  />
);

export type UseCreateDeliverGoodUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfDeliverGoodsDTO | void, void, void, UpsertDeliverGoodsDTORequestBody, void>, "path" | "verb">;

/**
 * createDeliverGood
 */
export const useCreateDeliverGoodUsingPOST = (props: UseCreateDeliverGoodUsingPOSTProps) => useMutate<ResponseDTOOfDeliverGoodsDTO | void, void, void, UpsertDeliverGoodsDTORequestBody, void>("POST", `/olokoservice/deliverGoods`, props);


export interface GitDeliverGoodUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GitDeliverGoodUsingGETProps = Omit<GetProps<ResponseDTOOfDeliverGoodsDTO, void, void, GitDeliverGoodUsingGETPathParams>, "path"> & GitDeliverGoodUsingGETPathParams;

/**
 * gitDeliverGood
 */
export const GitDeliverGoodUsingGET = ({bizId, ...props}: GitDeliverGoodUsingGETProps) => (
  <Get<ResponseDTOOfDeliverGoodsDTO, void, void, GitDeliverGoodUsingGETPathParams>
    path={`/olokoservice/deliverGoods/${bizId}`}
    
    {...props}
  />
);

export type UseGitDeliverGoodUsingGETProps = Omit<UseGetProps<ResponseDTOOfDeliverGoodsDTO, void, void, GitDeliverGoodUsingGETPathParams>, "path"> & GitDeliverGoodUsingGETPathParams;

/**
 * gitDeliverGood
 */
export const useGitDeliverGoodUsingGET = ({bizId, ...props}: UseGitDeliverGoodUsingGETProps) => useGet<ResponseDTOOfDeliverGoodsDTO, void, void, GitDeliverGoodUsingGETPathParams>((paramsInPath: GitDeliverGoodUsingGETPathParams) => `/olokoservice/deliverGoods/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateDeliverGoodsUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateDeliverGoodsUsingPUTProps = Omit<MutateProps<ResponseDTOOfDeliverGoodsDTO | void, void, void, UpsertDeliverGoodsDTORequestBody, UpdateDeliverGoodsUsingPUTPathParams>, "path" | "verb"> & UpdateDeliverGoodsUsingPUTPathParams;

/**
 * updateDeliverGoods
 */
export const UpdateDeliverGoodsUsingPUT = ({bizId, ...props}: UpdateDeliverGoodsUsingPUTProps) => (
  <Mutate<ResponseDTOOfDeliverGoodsDTO | void, void, void, UpsertDeliverGoodsDTORequestBody, UpdateDeliverGoodsUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/deliverGoods/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateDeliverGoodsUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfDeliverGoodsDTO | void, void, void, UpsertDeliverGoodsDTORequestBody, UpdateDeliverGoodsUsingPUTPathParams>, "path" | "verb"> & UpdateDeliverGoodsUsingPUTPathParams;

/**
 * updateDeliverGoods
 */
export const useUpdateDeliverGoodsUsingPUT = ({bizId, ...props}: UseUpdateDeliverGoodsUsingPUTProps) => useMutate<ResponseDTOOfDeliverGoodsDTO | void, void, void, UpsertDeliverGoodsDTORequestBody, UpdateDeliverGoodsUsingPUTPathParams>("PUT", (paramsInPath: UpdateDeliverGoodsUsingPUTPathParams) => `/olokoservice/deliverGoods/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteDeliverGoodsUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteDeliverGoodsUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteDeliverGoodsUsingPUTPathParams>, "path" | "verb"> & DeleteDeliverGoodsUsingPUTPathParams;

/**
 * deleteDeliverGoods
 */
export const DeleteDeliverGoodsUsingPUT = ({bizId, ...props}: DeleteDeliverGoodsUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteDeliverGoodsUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/deliverGoods/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteDeliverGoodsUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteDeliverGoodsUsingPUTPathParams>, "path" | "verb"> & DeleteDeliverGoodsUsingPUTPathParams;

/**
 * deleteDeliverGoods
 */
export const useDeleteDeliverGoodsUsingPUT = ({bizId, ...props}: UseDeleteDeliverGoodsUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteDeliverGoodsUsingPUTPathParams>("PUT", (paramsInPath: DeleteDeliverGoodsUsingPUTPathParams) => `/olokoservice/deliverGoods/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface GetDepartmentsUsingGETQueryParams {
  /**
   * name
   */
  name?: string;
  /**
   * parentDepartmentBizId
   */
  parentDepartmentBizId?: string;
  /**
   * userBizId
   */
  userBizId?: string;
}

export type GetDepartmentsUsingGETProps = Omit<GetProps<ResponseDTOOfListOfDepartmentDTO, void, GetDepartmentsUsingGETQueryParams, void>, "path">;

/**
 * getDepartments
 */
export const GetDepartmentsUsingGET = (props: GetDepartmentsUsingGETProps) => (
  <Get<ResponseDTOOfListOfDepartmentDTO, void, GetDepartmentsUsingGETQueryParams, void>
    path={`/olokoservice/department`}
    
    {...props}
  />
);

export type UseGetDepartmentsUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfDepartmentDTO, void, GetDepartmentsUsingGETQueryParams, void>, "path">;

/**
 * getDepartments
 */
export const useGetDepartmentsUsingGET = (props: UseGetDepartmentsUsingGETProps) => useGet<ResponseDTOOfListOfDepartmentDTO, void, GetDepartmentsUsingGETQueryParams, void>(`/olokoservice/department`, props);


export type CreateDepartmentUsingPOSTProps = Omit<MutateProps<ResponseDTOOfDepartmentDTO | void, void, void, UpsertDepartmentRequestDTO, void>, "path" | "verb">;

/**
 * createDepartment
 */
export const CreateDepartmentUsingPOST = (props: CreateDepartmentUsingPOSTProps) => (
  <Mutate<ResponseDTOOfDepartmentDTO | void, void, void, UpsertDepartmentRequestDTO, void>
    verb="POST"
    path={`/olokoservice/department`}
    
    {...props}
  />
);

export type UseCreateDepartmentUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfDepartmentDTO | void, void, void, UpsertDepartmentRequestDTO, void>, "path" | "verb">;

/**
 * createDepartment
 */
export const useCreateDepartmentUsingPOST = (props: UseCreateDepartmentUsingPOSTProps) => useMutate<ResponseDTOOfDepartmentDTO | void, void, void, UpsertDepartmentRequestDTO, void>("POST", `/olokoservice/department`, props);


export interface GetDepartmentUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetDepartmentUsingGETProps = Omit<GetProps<ResponseDTOOfDepartmentDTO, void, void, GetDepartmentUsingGETPathParams>, "path"> & GetDepartmentUsingGETPathParams;

/**
 * getDepartment
 */
export const GetDepartmentUsingGET = ({bizId, ...props}: GetDepartmentUsingGETProps) => (
  <Get<ResponseDTOOfDepartmentDTO, void, void, GetDepartmentUsingGETPathParams>
    path={`/olokoservice/department/${bizId}`}
    
    {...props}
  />
);

export type UseGetDepartmentUsingGETProps = Omit<UseGetProps<ResponseDTOOfDepartmentDTO, void, void, GetDepartmentUsingGETPathParams>, "path"> & GetDepartmentUsingGETPathParams;

/**
 * getDepartment
 */
export const useGetDepartmentUsingGET = ({bizId, ...props}: UseGetDepartmentUsingGETProps) => useGet<ResponseDTOOfDepartmentDTO, void, void, GetDepartmentUsingGETPathParams>((paramsInPath: GetDepartmentUsingGETPathParams) => `/olokoservice/department/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateDepartmentUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateDepartmentUsingPUTProps = Omit<MutateProps<ResponseDTOOfDepartmentDTO | void, void, void, UpsertDepartmentRequestDTO, UpdateDepartmentUsingPUTPathParams>, "path" | "verb"> & UpdateDepartmentUsingPUTPathParams;

/**
 * updateDepartment
 */
export const UpdateDepartmentUsingPUT = ({bizId, ...props}: UpdateDepartmentUsingPUTProps) => (
  <Mutate<ResponseDTOOfDepartmentDTO | void, void, void, UpsertDepartmentRequestDTO, UpdateDepartmentUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/department/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateDepartmentUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfDepartmentDTO | void, void, void, UpsertDepartmentRequestDTO, UpdateDepartmentUsingPUTPathParams>, "path" | "verb"> & UpdateDepartmentUsingPUTPathParams;

/**
 * updateDepartment
 */
export const useUpdateDepartmentUsingPUT = ({bizId, ...props}: UseUpdateDepartmentUsingPUTProps) => useMutate<ResponseDTOOfDepartmentDTO | void, void, void, UpsertDepartmentRequestDTO, UpdateDepartmentUsingPUTPathParams>("PUT", (paramsInPath: UpdateDepartmentUsingPUTPathParams) => `/olokoservice/department/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteDepartmentUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteDepartmentUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteDepartmentUsingPUTPathParams>, "path" | "verb"> & DeleteDepartmentUsingPUTPathParams;

/**
 * deleteDepartment
 */
export const DeleteDepartmentUsingPUT = ({bizId, ...props}: DeleteDepartmentUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteDepartmentUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/department/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteDepartmentUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteDepartmentUsingPUTPathParams>, "path" | "verb"> & DeleteDepartmentUsingPUTPathParams;

/**
 * deleteDepartment
 */
export const useDeleteDepartmentUsingPUT = ({bizId, ...props}: UseDeleteDepartmentUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteDepartmentUsingPUTPathParams>("PUT", (paramsInPath: DeleteDepartmentUsingPUTPathParams) => `/olokoservice/department/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface AddUserToDepartmentUsingPOSTQueryParams {
  /**
   * userBizId
   */
  userBizId: string;
}

export interface AddUserToDepartmentUsingPOSTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type AddUserToDepartmentUsingPOSTProps = Omit<MutateProps<ResponseDTO | void, void, AddUserToDepartmentUsingPOSTQueryParams, void, AddUserToDepartmentUsingPOSTPathParams>, "path" | "verb"> & AddUserToDepartmentUsingPOSTPathParams;

/**
 * addUserToDepartment
 */
export const AddUserToDepartmentUsingPOST = ({bizId, ...props}: AddUserToDepartmentUsingPOSTProps) => (
  <Mutate<ResponseDTO | void, void, AddUserToDepartmentUsingPOSTQueryParams, void, AddUserToDepartmentUsingPOSTPathParams>
    verb="POST"
    path={`/olokoservice/department/${bizId}/user`}
    
    {...props}
  />
);

export type UseAddUserToDepartmentUsingPOSTProps = Omit<UseMutateProps<ResponseDTO | void, void, AddUserToDepartmentUsingPOSTQueryParams, void, AddUserToDepartmentUsingPOSTPathParams>, "path" | "verb"> & AddUserToDepartmentUsingPOSTPathParams;

/**
 * addUserToDepartment
 */
export const useAddUserToDepartmentUsingPOST = ({bizId, ...props}: UseAddUserToDepartmentUsingPOSTProps) => useMutate<ResponseDTO | void, void, AddUserToDepartmentUsingPOSTQueryParams, void, AddUserToDepartmentUsingPOSTPathParams>("POST", (paramsInPath: AddUserToDepartmentUsingPOSTPathParams) => `/olokoservice/department/${paramsInPath.bizId}/user`, {  pathParams: { bizId }, ...props });


export interface UpdateDepartmentUserUsingPUTQueryParams {
  /**
   * userBizId
   */
  userBizId: string;
}

export interface UpdateDepartmentUserUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateDepartmentUserUsingPUTProps = Omit<MutateProps<ResponseDTO | void, void, UpdateDepartmentUserUsingPUTQueryParams, UpdateDepartUser, UpdateDepartmentUserUsingPUTPathParams>, "path" | "verb"> & UpdateDepartmentUserUsingPUTPathParams;

/**
 * updateDepartmentUser
 */
export const UpdateDepartmentUserUsingPUT = ({bizId, ...props}: UpdateDepartmentUserUsingPUTProps) => (
  <Mutate<ResponseDTO | void, void, UpdateDepartmentUserUsingPUTQueryParams, UpdateDepartUser, UpdateDepartmentUserUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/department/${bizId}/user`}
    
    {...props}
  />
);

export type UseUpdateDepartmentUserUsingPUTProps = Omit<UseMutateProps<ResponseDTO | void, void, UpdateDepartmentUserUsingPUTQueryParams, UpdateDepartUser, UpdateDepartmentUserUsingPUTPathParams>, "path" | "verb"> & UpdateDepartmentUserUsingPUTPathParams;

/**
 * updateDepartmentUser
 */
export const useUpdateDepartmentUserUsingPUT = ({bizId, ...props}: UseUpdateDepartmentUserUsingPUTProps) => useMutate<ResponseDTO | void, void, UpdateDepartmentUserUsingPUTQueryParams, UpdateDepartUser, UpdateDepartmentUserUsingPUTPathParams>("PUT", (paramsInPath: UpdateDepartmentUserUsingPUTPathParams) => `/olokoservice/department/${paramsInPath.bizId}/user`, {  pathParams: { bizId }, ...props });


export interface BatchAddUserToDepartmentUsingPOSTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type BatchAddUserToDepartmentUsingPOSTProps = Omit<MutateProps<ResponseDTO | void, void, void, BatchAddUserToDepartDTO, BatchAddUserToDepartmentUsingPOSTPathParams>, "path" | "verb"> & BatchAddUserToDepartmentUsingPOSTPathParams;

/**
 * batchAddUserToDepartment
 */
export const BatchAddUserToDepartmentUsingPOST = ({bizId, ...props}: BatchAddUserToDepartmentUsingPOSTProps) => (
  <Mutate<ResponseDTO | void, void, void, BatchAddUserToDepartDTO, BatchAddUserToDepartmentUsingPOSTPathParams>
    verb="POST"
    path={`/olokoservice/department/${bizId}/user/batch`}
    
    {...props}
  />
);

export type UseBatchAddUserToDepartmentUsingPOSTProps = Omit<UseMutateProps<ResponseDTO | void, void, void, BatchAddUserToDepartDTO, BatchAddUserToDepartmentUsingPOSTPathParams>, "path" | "verb"> & BatchAddUserToDepartmentUsingPOSTPathParams;

/**
 * batchAddUserToDepartment
 */
export const useBatchAddUserToDepartmentUsingPOST = ({bizId, ...props}: UseBatchAddUserToDepartmentUsingPOSTProps) => useMutate<ResponseDTO | void, void, void, BatchAddUserToDepartDTO, BatchAddUserToDepartmentUsingPOSTPathParams>("POST", (paramsInPath: BatchAddUserToDepartmentUsingPOSTPathParams) => `/olokoservice/department/${paramsInPath.bizId}/user/batch`, {  pathParams: { bizId }, ...props });


export interface UpdateDepartmentUserPositionUsingPUTQueryParams {
  /**
   * userBizId
   */
  userBizId: string;
}

export interface UpdateDepartmentUserPositionUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateDepartmentUserPositionUsingPUTProps = Omit<MutateProps<ResponseDTO | void, void, UpdateDepartmentUserPositionUsingPUTQueryParams, UpsertUserDepartmentDTO, UpdateDepartmentUserPositionUsingPUTPathParams>, "path" | "verb"> & UpdateDepartmentUserPositionUsingPUTPathParams;

/**
 * updateDepartmentUserPosition
 */
export const UpdateDepartmentUserPositionUsingPUT = ({bizId, ...props}: UpdateDepartmentUserPositionUsingPUTProps) => (
  <Mutate<ResponseDTO | void, void, UpdateDepartmentUserPositionUsingPUTQueryParams, UpsertUserDepartmentDTO, UpdateDepartmentUserPositionUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/department/${bizId}/user/position`}
    
    {...props}
  />
);

export type UseUpdateDepartmentUserPositionUsingPUTProps = Omit<UseMutateProps<ResponseDTO | void, void, UpdateDepartmentUserPositionUsingPUTQueryParams, UpsertUserDepartmentDTO, UpdateDepartmentUserPositionUsingPUTPathParams>, "path" | "verb"> & UpdateDepartmentUserPositionUsingPUTPathParams;

/**
 * updateDepartmentUserPosition
 */
export const useUpdateDepartmentUserPositionUsingPUT = ({bizId, ...props}: UseUpdateDepartmentUserPositionUsingPUTProps) => useMutate<ResponseDTO | void, void, UpdateDepartmentUserPositionUsingPUTQueryParams, UpsertUserDepartmentDTO, UpdateDepartmentUserPositionUsingPUTPathParams>("PUT", (paramsInPath: UpdateDepartmentUserPositionUsingPUTPathParams) => `/olokoservice/department/${paramsInPath.bizId}/user/position`, {  pathParams: { bizId }, ...props });


export interface RemoveDepartmentUserUsingPUTQueryParams {
  /**
   * userBizId
   */
  userBizId: string;
}

export interface RemoveDepartmentUserUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type RemoveDepartmentUserUsingPUTProps = Omit<MutateProps<ResponseDTO | void, void, RemoveDepartmentUserUsingPUTQueryParams, void, RemoveDepartmentUserUsingPUTPathParams>, "path" | "verb"> & RemoveDepartmentUserUsingPUTPathParams;

/**
 * removeDepartmentUser
 */
export const RemoveDepartmentUserUsingPUT = ({bizId, ...props}: RemoveDepartmentUserUsingPUTProps) => (
  <Mutate<ResponseDTO | void, void, RemoveDepartmentUserUsingPUTQueryParams, void, RemoveDepartmentUserUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/department/${bizId}/user/remove`}
    
    {...props}
  />
);

export type UseRemoveDepartmentUserUsingPUTProps = Omit<UseMutateProps<ResponseDTO | void, void, RemoveDepartmentUserUsingPUTQueryParams, void, RemoveDepartmentUserUsingPUTPathParams>, "path" | "verb"> & RemoveDepartmentUserUsingPUTPathParams;

/**
 * removeDepartmentUser
 */
export const useRemoveDepartmentUserUsingPUT = ({bizId, ...props}: UseRemoveDepartmentUserUsingPUTProps) => useMutate<ResponseDTO | void, void, RemoveDepartmentUserUsingPUTQueryParams, void, RemoveDepartmentUserUsingPUTPathParams>("PUT", (paramsInPath: RemoveDepartmentUserUsingPUTPathParams) => `/olokoservice/department/${paramsInPath.bizId}/user/remove`, {  pathParams: { bizId }, ...props });


export interface GetDepartmentUsersUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetDepartmentUsersUsingGETProps = Omit<GetProps<ResponseDTOOfListOfUserDepartmentDTO, void, void, GetDepartmentUsersUsingGETPathParams>, "path"> & GetDepartmentUsersUsingGETPathParams;

/**
 * getDepartmentUsers
 */
export const GetDepartmentUsersUsingGET = ({bizId, ...props}: GetDepartmentUsersUsingGETProps) => (
  <Get<ResponseDTOOfListOfUserDepartmentDTO, void, void, GetDepartmentUsersUsingGETPathParams>
    path={`/olokoservice/department/${bizId}/users`}
    
    {...props}
  />
);

export type UseGetDepartmentUsersUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfUserDepartmentDTO, void, void, GetDepartmentUsersUsingGETPathParams>, "path"> & GetDepartmentUsersUsingGETPathParams;

/**
 * getDepartmentUsers
 */
export const useGetDepartmentUsersUsingGET = ({bizId, ...props}: UseGetDepartmentUsersUsingGETProps) => useGet<ResponseDTOOfListOfUserDepartmentDTO, void, void, GetDepartmentUsersUsingGETPathParams>((paramsInPath: GetDepartmentUsersUsingGETPathParams) => `/olokoservice/department/${paramsInPath.bizId}/users`, {  pathParams: { bizId }, ...props });


export interface GetDepartmentUserAuthoritiesUsingGETQueryParams {
  /**
   * userAuthorityName
   */
  userAuthorityName?: string;
}

export interface GetDepartmentUserAuthoritiesUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetDepartmentUserAuthoritiesUsingGETProps = Omit<GetProps<ResponseDTOOfListOfAccountUserDTO, void, GetDepartmentUserAuthoritiesUsingGETQueryParams, GetDepartmentUserAuthoritiesUsingGETPathParams>, "path"> & GetDepartmentUserAuthoritiesUsingGETPathParams;

/**
 * getDepartmentUserAuthorities
 */
export const GetDepartmentUserAuthoritiesUsingGET = ({bizId, ...props}: GetDepartmentUserAuthoritiesUsingGETProps) => (
  <Get<ResponseDTOOfListOfAccountUserDTO, void, GetDepartmentUserAuthoritiesUsingGETQueryParams, GetDepartmentUserAuthoritiesUsingGETPathParams>
    path={`/olokoservice/department/${bizId}/users/authority`}
    
    {...props}
  />
);

export type UseGetDepartmentUserAuthoritiesUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfAccountUserDTO, void, GetDepartmentUserAuthoritiesUsingGETQueryParams, GetDepartmentUserAuthoritiesUsingGETPathParams>, "path"> & GetDepartmentUserAuthoritiesUsingGETPathParams;

/**
 * getDepartmentUserAuthorities
 */
export const useGetDepartmentUserAuthoritiesUsingGET = ({bizId, ...props}: UseGetDepartmentUserAuthoritiesUsingGETProps) => useGet<ResponseDTOOfListOfAccountUserDTO, void, GetDepartmentUserAuthoritiesUsingGETQueryParams, GetDepartmentUserAuthoritiesUsingGETPathParams>((paramsInPath: GetDepartmentUserAuthoritiesUsingGETPathParams) => `/olokoservice/department/${paramsInPath.bizId}/users/authority`, {  pathParams: { bizId }, ...props });


export interface GitFeedbacksUsingGETQueryParams {
  /**
   * fullName
   */
  fullName?: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
  /**
   * telephone
   */
  telephone?: string;
}

export type GitFeedbacksUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfFeedbackDTO, void, GitFeedbacksUsingGETQueryParams, void>, "path">;

/**
 * gitFeedbacks
 */
export const GitFeedbacksUsingGET = (props: GitFeedbacksUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfFeedbackDTO, void, GitFeedbacksUsingGETQueryParams, void>
    path={`/olokoservice/feedback`}
    
    {...props}
  />
);

export type UseGitFeedbacksUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfFeedbackDTO, void, GitFeedbacksUsingGETQueryParams, void>, "path">;

/**
 * gitFeedbacks
 */
export const useGitFeedbacksUsingGET = (props: UseGitFeedbacksUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfFeedbackDTO, void, GitFeedbacksUsingGETQueryParams, void>(`/olokoservice/feedback`, props);


export type CreateFeedbackUsingPOSTProps = Omit<MutateProps<ResponseDTOOfFeedbackDTO | void, void, void, UpsertFeedbackRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createFeedback
 */
export const CreateFeedbackUsingPOST = (props: CreateFeedbackUsingPOSTProps) => (
  <Mutate<ResponseDTOOfFeedbackDTO | void, void, void, UpsertFeedbackRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/feedback`}
    
    {...props}
  />
);

export type UseCreateFeedbackUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfFeedbackDTO | void, void, void, UpsertFeedbackRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createFeedback
 */
export const useCreateFeedbackUsingPOST = (props: UseCreateFeedbackUsingPOSTProps) => useMutate<ResponseDTOOfFeedbackDTO | void, void, void, UpsertFeedbackRequestDTORequestBody, void>("POST", `/olokoservice/feedback`, props);


export interface GetFeedbackUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetFeedbackUsingGETProps = Omit<GetProps<ResponseDTOOfFeedbackDTO, void, void, GetFeedbackUsingGETPathParams>, "path"> & GetFeedbackUsingGETPathParams;

/**
 * getFeedback
 */
export const GetFeedbackUsingGET = ({bizId, ...props}: GetFeedbackUsingGETProps) => (
  <Get<ResponseDTOOfFeedbackDTO, void, void, GetFeedbackUsingGETPathParams>
    path={`/olokoservice/feedback/${bizId}`}
    
    {...props}
  />
);

export type UseGetFeedbackUsingGETProps = Omit<UseGetProps<ResponseDTOOfFeedbackDTO, void, void, GetFeedbackUsingGETPathParams>, "path"> & GetFeedbackUsingGETPathParams;

/**
 * getFeedback
 */
export const useGetFeedbackUsingGET = ({bizId, ...props}: UseGetFeedbackUsingGETProps) => useGet<ResponseDTOOfFeedbackDTO, void, void, GetFeedbackUsingGETPathParams>((paramsInPath: GetFeedbackUsingGETPathParams) => `/olokoservice/feedback/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateFeedbackUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateFeedbackUsingPUTProps = Omit<MutateProps<ResponseDTOOfFeedbackDTO | void, void, void, UpsertFeedbackRequestDTORequestBody, UpdateFeedbackUsingPUTPathParams>, "path" | "verb"> & UpdateFeedbackUsingPUTPathParams;

/**
 * updateFeedback
 */
export const UpdateFeedbackUsingPUT = ({bizId, ...props}: UpdateFeedbackUsingPUTProps) => (
  <Mutate<ResponseDTOOfFeedbackDTO | void, void, void, UpsertFeedbackRequestDTORequestBody, UpdateFeedbackUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/feedback/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateFeedbackUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfFeedbackDTO | void, void, void, UpsertFeedbackRequestDTORequestBody, UpdateFeedbackUsingPUTPathParams>, "path" | "verb"> & UpdateFeedbackUsingPUTPathParams;

/**
 * updateFeedback
 */
export const useUpdateFeedbackUsingPUT = ({bizId, ...props}: UseUpdateFeedbackUsingPUTProps) => useMutate<ResponseDTOOfFeedbackDTO | void, void, void, UpsertFeedbackRequestDTORequestBody, UpdateFeedbackUsingPUTPathParams>("PUT", (paramsInPath: UpdateFeedbackUsingPUTPathParams) => `/olokoservice/feedback/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface ApprovedFeedbackUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type ApprovedFeedbackUsingPUTProps = Omit<MutateProps<ResponseDTOOfFeedbackDTO | void, void, void, void, ApprovedFeedbackUsingPUTPathParams>, "path" | "verb"> & ApprovedFeedbackUsingPUTPathParams;

/**
 * approvedFeedback
 */
export const ApprovedFeedbackUsingPUT = ({bizId, ...props}: ApprovedFeedbackUsingPUTProps) => (
  <Mutate<ResponseDTOOfFeedbackDTO | void, void, void, void, ApprovedFeedbackUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/feedback/${bizId}/approved`}
    
    {...props}
  />
);

export type UseApprovedFeedbackUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfFeedbackDTO | void, void, void, void, ApprovedFeedbackUsingPUTPathParams>, "path" | "verb"> & ApprovedFeedbackUsingPUTPathParams;

/**
 * approvedFeedback
 */
export const useApprovedFeedbackUsingPUT = ({bizId, ...props}: UseApprovedFeedbackUsingPUTProps) => useMutate<ResponseDTOOfFeedbackDTO | void, void, void, void, ApprovedFeedbackUsingPUTPathParams>("PUT", (paramsInPath: ApprovedFeedbackUsingPUTPathParams) => `/olokoservice/feedback/${paramsInPath.bizId}/approved`, {  pathParams: { bizId }, ...props });


export interface DeleteFeedbackUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteFeedbackUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteFeedbackUsingPUTPathParams>, "path" | "verb"> & DeleteFeedbackUsingPUTPathParams;

/**
 * deleteFeedback
 */
export const DeleteFeedbackUsingPUT = ({bizId, ...props}: DeleteFeedbackUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteFeedbackUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/feedback/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteFeedbackUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteFeedbackUsingPUTPathParams>, "path" | "verb"> & DeleteFeedbackUsingPUTPathParams;

/**
 * deleteFeedback
 */
export const useDeleteFeedbackUsingPUT = ({bizId, ...props}: UseDeleteFeedbackUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteFeedbackUsingPUTPathParams>("PUT", (paramsInPath: DeleteFeedbackUsingPUTPathParams) => `/olokoservice/feedback/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface GetInventorysUsingGETQueryParams {
  /**
   * page
   */
  page?: number;
  /**
   * restaurantBizId
   */
  restaurantBizId?: string;
  /**
   * size
   */
  size?: number;
}

export type GetInventorysUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfInventoryDTO, void, GetInventorysUsingGETQueryParams, void>, "path">;

/**
 * getInventorys
 */
export const GetInventorysUsingGET = (props: GetInventorysUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfInventoryDTO, void, GetInventorysUsingGETQueryParams, void>
    path={`/olokoservice/inventory`}
    
    {...props}
  />
);

export type UseGetInventorysUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfInventoryDTO, void, GetInventorysUsingGETQueryParams, void>, "path">;

/**
 * getInventorys
 */
export const useGetInventorysUsingGET = (props: UseGetInventorysUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfInventoryDTO, void, GetInventorysUsingGETQueryParams, void>(`/olokoservice/inventory`, props);


export type CreateInventoryUsingPOSTProps = Omit<MutateProps<ResponseDTOOfInventoryDTO | void, void, void, UpsertInventoryRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createInventory
 */
export const CreateInventoryUsingPOST = (props: CreateInventoryUsingPOSTProps) => (
  <Mutate<ResponseDTOOfInventoryDTO | void, void, void, UpsertInventoryRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/inventory`}
    
    {...props}
  />
);

export type UseCreateInventoryUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfInventoryDTO | void, void, void, UpsertInventoryRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createInventory
 */
export const useCreateInventoryUsingPOST = (props: UseCreateInventoryUsingPOSTProps) => useMutate<ResponseDTOOfInventoryDTO | void, void, void, UpsertInventoryRequestDTORequestBody, void>("POST", `/olokoservice/inventory`, props);


export interface GetInventoryUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetInventoryUsingGETProps = Omit<GetProps<ResponseDTOOfInventoryDTO, void, void, GetInventoryUsingGETPathParams>, "path"> & GetInventoryUsingGETPathParams;

/**
 * getInventory
 */
export const GetInventoryUsingGET = ({bizId, ...props}: GetInventoryUsingGETProps) => (
  <Get<ResponseDTOOfInventoryDTO, void, void, GetInventoryUsingGETPathParams>
    path={`/olokoservice/inventory/${bizId}`}
    
    {...props}
  />
);

export type UseGetInventoryUsingGETProps = Omit<UseGetProps<ResponseDTOOfInventoryDTO, void, void, GetInventoryUsingGETPathParams>, "path"> & GetInventoryUsingGETPathParams;

/**
 * getInventory
 */
export const useGetInventoryUsingGET = ({bizId, ...props}: UseGetInventoryUsingGETProps) => useGet<ResponseDTOOfInventoryDTO, void, void, GetInventoryUsingGETPathParams>((paramsInPath: GetInventoryUsingGETPathParams) => `/olokoservice/inventory/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateInventoryUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateInventoryUsingPUTProps = Omit<MutateProps<ResponseDTOOfInventoryDTO | void, void, void, UpsertInventoryRequestDTORequestBody, UpdateInventoryUsingPUTPathParams>, "path" | "verb"> & UpdateInventoryUsingPUTPathParams;

/**
 * updateInventory
 */
export const UpdateInventoryUsingPUT = ({bizId, ...props}: UpdateInventoryUsingPUTProps) => (
  <Mutate<ResponseDTOOfInventoryDTO | void, void, void, UpsertInventoryRequestDTORequestBody, UpdateInventoryUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/inventory/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateInventoryUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfInventoryDTO | void, void, void, UpsertInventoryRequestDTORequestBody, UpdateInventoryUsingPUTPathParams>, "path" | "verb"> & UpdateInventoryUsingPUTPathParams;

/**
 * updateInventory
 */
export const useUpdateInventoryUsingPUT = ({bizId, ...props}: UseUpdateInventoryUsingPUTProps) => useMutate<ResponseDTOOfInventoryDTO | void, void, void, UpsertInventoryRequestDTORequestBody, UpdateInventoryUsingPUTPathParams>("PUT", (paramsInPath: UpdateInventoryUsingPUTPathParams) => `/olokoservice/inventory/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteInventoryUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteInventoryUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteInventoryUsingPUTPathParams>, "path" | "verb"> & DeleteInventoryUsingPUTPathParams;

/**
 * deleteInventory
 */
export const DeleteInventoryUsingPUT = ({bizId, ...props}: DeleteInventoryUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteInventoryUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/inventory/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteInventoryUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteInventoryUsingPUTPathParams>, "path" | "verb"> & DeleteInventoryUsingPUTPathParams;

/**
 * deleteInventory
 */
export const useDeleteInventoryUsingPUT = ({bizId, ...props}: UseDeleteInventoryUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteInventoryUsingPUTPathParams>("PUT", (paramsInPath: DeleteInventoryUsingPUTPathParams) => `/olokoservice/inventory/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface GetKeyCustomersUsingGETQueryParams {
  /**
   * adopt
   */
  adopt?: string;
  /**
   * page
   */
  page?: number;
  /**
   * restaurantBizId
   */
  restaurantBizId?: string;
  /**
   * siz
   */
  siz?: number;
}

export type GetKeyCustomersUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfKeyCustomersDTO, void, GetKeyCustomersUsingGETQueryParams, void>, "path">;

/**
 * getKeyCustomers
 */
export const GetKeyCustomersUsingGET = (props: GetKeyCustomersUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfKeyCustomersDTO, void, GetKeyCustomersUsingGETQueryParams, void>
    path={`/olokoservice/keyCustomers`}
    
    {...props}
  />
);

export type UseGetKeyCustomersUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfKeyCustomersDTO, void, GetKeyCustomersUsingGETQueryParams, void>, "path">;

/**
 * getKeyCustomers
 */
export const useGetKeyCustomersUsingGET = (props: UseGetKeyCustomersUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfKeyCustomersDTO, void, GetKeyCustomersUsingGETQueryParams, void>(`/olokoservice/keyCustomers`, props);


export type CreateKeyCustomersUsingPOSTProps = Omit<MutateProps<ResponseDTOOfKeyCustomersDTO | void, void, void, UpsertKeyCustomersRequestDTO, void>, "path" | "verb">;

/**
 * createKeyCustomers
 */
export const CreateKeyCustomersUsingPOST = (props: CreateKeyCustomersUsingPOSTProps) => (
  <Mutate<ResponseDTOOfKeyCustomersDTO | void, void, void, UpsertKeyCustomersRequestDTO, void>
    verb="POST"
    path={`/olokoservice/keyCustomers`}
    
    {...props}
  />
);

export type UseCreateKeyCustomersUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfKeyCustomersDTO | void, void, void, UpsertKeyCustomersRequestDTO, void>, "path" | "verb">;

/**
 * createKeyCustomers
 */
export const useCreateKeyCustomersUsingPOST = (props: UseCreateKeyCustomersUsingPOSTProps) => useMutate<ResponseDTOOfKeyCustomersDTO | void, void, void, UpsertKeyCustomersRequestDTO, void>("POST", `/olokoservice/keyCustomers`, props);


export interface GetKeyCustomerUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetKeyCustomerUsingGETProps = Omit<GetProps<ResponseDTOOfKeyCustomersDTO, void, void, GetKeyCustomerUsingGETPathParams>, "path"> & GetKeyCustomerUsingGETPathParams;

/**
 * getKeyCustomer
 */
export const GetKeyCustomerUsingGET = ({bizId, ...props}: GetKeyCustomerUsingGETProps) => (
  <Get<ResponseDTOOfKeyCustomersDTO, void, void, GetKeyCustomerUsingGETPathParams>
    path={`/olokoservice/keyCustomers/${bizId}`}
    
    {...props}
  />
);

export type UseGetKeyCustomerUsingGETProps = Omit<UseGetProps<ResponseDTOOfKeyCustomersDTO, void, void, GetKeyCustomerUsingGETPathParams>, "path"> & GetKeyCustomerUsingGETPathParams;

/**
 * getKeyCustomer
 */
export const useGetKeyCustomerUsingGET = ({bizId, ...props}: UseGetKeyCustomerUsingGETProps) => useGet<ResponseDTOOfKeyCustomersDTO, void, void, GetKeyCustomerUsingGETPathParams>((paramsInPath: GetKeyCustomerUsingGETPathParams) => `/olokoservice/keyCustomers/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateKeyCustomersUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateKeyCustomersUsingPUTProps = Omit<MutateProps<ResponseDTOOfKeyCustomersDTO | void, void, void, UpsertKeyCustomersRequestDTO, UpdateKeyCustomersUsingPUTPathParams>, "path" | "verb"> & UpdateKeyCustomersUsingPUTPathParams;

/**
 * updateKeyCustomers
 */
export const UpdateKeyCustomersUsingPUT = ({bizId, ...props}: UpdateKeyCustomersUsingPUTProps) => (
  <Mutate<ResponseDTOOfKeyCustomersDTO | void, void, void, UpsertKeyCustomersRequestDTO, UpdateKeyCustomersUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/keyCustomers/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateKeyCustomersUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfKeyCustomersDTO | void, void, void, UpsertKeyCustomersRequestDTO, UpdateKeyCustomersUsingPUTPathParams>, "path" | "verb"> & UpdateKeyCustomersUsingPUTPathParams;

/**
 * updateKeyCustomers
 */
export const useUpdateKeyCustomersUsingPUT = ({bizId, ...props}: UseUpdateKeyCustomersUsingPUTProps) => useMutate<ResponseDTOOfKeyCustomersDTO | void, void, void, UpsertKeyCustomersRequestDTO, UpdateKeyCustomersUsingPUTPathParams>("PUT", (paramsInPath: UpdateKeyCustomersUsingPUTPathParams) => `/olokoservice/keyCustomers/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface ApprovedKeyCustomersUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type ApprovedKeyCustomersUsingPUTProps = Omit<MutateProps<ResponseDTOOfKeyCustomersDTO | void, void, void, void, ApprovedKeyCustomersUsingPUTPathParams>, "path" | "verb"> & ApprovedKeyCustomersUsingPUTPathParams;

/**
 * approvedKeyCustomers
 */
export const ApprovedKeyCustomersUsingPUT = ({bizId, ...props}: ApprovedKeyCustomersUsingPUTProps) => (
  <Mutate<ResponseDTOOfKeyCustomersDTO | void, void, void, void, ApprovedKeyCustomersUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/keyCustomers/${bizId}/approved`}
    
    {...props}
  />
);

export type UseApprovedKeyCustomersUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfKeyCustomersDTO | void, void, void, void, ApprovedKeyCustomersUsingPUTPathParams>, "path" | "verb"> & ApprovedKeyCustomersUsingPUTPathParams;

/**
 * approvedKeyCustomers
 */
export const useApprovedKeyCustomersUsingPUT = ({bizId, ...props}: UseApprovedKeyCustomersUsingPUTProps) => useMutate<ResponseDTOOfKeyCustomersDTO | void, void, void, void, ApprovedKeyCustomersUsingPUTPathParams>("PUT", (paramsInPath: ApprovedKeyCustomersUsingPUTPathParams) => `/olokoservice/keyCustomers/${paramsInPath.bizId}/approved`, {  pathParams: { bizId }, ...props });


export interface DeleteKeyCustomersUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteKeyCustomersUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteKeyCustomersUsingPUTPathParams>, "path" | "verb"> & DeleteKeyCustomersUsingPUTPathParams;

/**
 * deleteKeyCustomers
 */
export const DeleteKeyCustomersUsingPUT = ({bizId, ...props}: DeleteKeyCustomersUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteKeyCustomersUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/keyCustomers/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteKeyCustomersUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteKeyCustomersUsingPUTPathParams>, "path" | "verb"> & DeleteKeyCustomersUsingPUTPathParams;

/**
 * deleteKeyCustomers
 */
export const useDeleteKeyCustomersUsingPUT = ({bizId, ...props}: UseDeleteKeyCustomersUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteKeyCustomersUsingPUTPathParams>("PUT", (paramsInPath: DeleteKeyCustomersUsingPUTPathParams) => `/olokoservice/keyCustomers/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface RejectedKeyCustomersUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type RejectedKeyCustomersUsingPUTProps = Omit<MutateProps<ResponseDTOOfKeyCustomersDTO | void, void, void, void, RejectedKeyCustomersUsingPUTPathParams>, "path" | "verb"> & RejectedKeyCustomersUsingPUTPathParams;

/**
 * rejectedKeyCustomers
 */
export const RejectedKeyCustomersUsingPUT = ({bizId, ...props}: RejectedKeyCustomersUsingPUTProps) => (
  <Mutate<ResponseDTOOfKeyCustomersDTO | void, void, void, void, RejectedKeyCustomersUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/keyCustomers/${bizId}/rejected`}
    
    {...props}
  />
);

export type UseRejectedKeyCustomersUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfKeyCustomersDTO | void, void, void, void, RejectedKeyCustomersUsingPUTPathParams>, "path" | "verb"> & RejectedKeyCustomersUsingPUTPathParams;

/**
 * rejectedKeyCustomers
 */
export const useRejectedKeyCustomersUsingPUT = ({bizId, ...props}: UseRejectedKeyCustomersUsingPUTProps) => useMutate<ResponseDTOOfKeyCustomersDTO | void, void, void, void, RejectedKeyCustomersUsingPUTPathParams>("PUT", (paramsInPath: RejectedKeyCustomersUsingPUTPathParams) => `/olokoservice/keyCustomers/${paramsInPath.bizId}/rejected`, {  pathParams: { bizId }, ...props });


export interface GetMessagesUsingGETQueryParams {
  /**
   * initUserBizId
   */
  initUserBizId?: string;
  /**
   * messageStatus
   */
  messageStatus?: string;
  /**
   * messageType
   */
  messageType?: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
  /**
   * targetUserBizId
   */
  targetUserBizId?: string;
}

export type GetMessagesUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfMessageDTO, void, GetMessagesUsingGETQueryParams, void>, "path">;

/**
 * getMessages
 */
export const GetMessagesUsingGET = (props: GetMessagesUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfMessageDTO, void, GetMessagesUsingGETQueryParams, void>
    path={`/olokoservice/message`}
    
    {...props}
  />
);

export type UseGetMessagesUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfMessageDTO, void, GetMessagesUsingGETQueryParams, void>, "path">;

/**
 * getMessages
 */
export const useGetMessagesUsingGET = (props: UseGetMessagesUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfMessageDTO, void, GetMessagesUsingGETQueryParams, void>(`/olokoservice/message`, props);


export type CreateMessageUsingPOSTProps = Omit<MutateProps<ResponseDTOOfMessageDTO | void, void, void, CreateMessageDTO, void>, "path" | "verb">;

/**
 * createMessage
 */
export const CreateMessageUsingPOST = (props: CreateMessageUsingPOSTProps) => (
  <Mutate<ResponseDTOOfMessageDTO | void, void, void, CreateMessageDTO, void>
    verb="POST"
    path={`/olokoservice/message`}
    
    {...props}
  />
);

export type UseCreateMessageUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfMessageDTO | void, void, void, CreateMessageDTO, void>, "path" | "verb">;

/**
 * createMessage
 */
export const useCreateMessageUsingPOST = (props: UseCreateMessageUsingPOSTProps) => useMutate<ResponseDTOOfMessageDTO | void, void, void, CreateMessageDTO, void>("POST", `/olokoservice/message`, props);


export type BatchDeleteMessageUsingPOSTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, BatchDeleteMessageUsingPOSTBizidsRequestBody, void>, "path" | "verb">;

/**
 * batchDeleteMessage
 */
export const BatchDeleteMessageUsingPOST = (props: BatchDeleteMessageUsingPOSTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, BatchDeleteMessageUsingPOSTBizidsRequestBody, void>
    verb="POST"
    path={`/olokoservice/message/batchDelete`}
    
    {...props}
  />
);

export type UseBatchDeleteMessageUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, BatchDeleteMessageUsingPOSTBizidsRequestBody, void>, "path" | "verb">;

/**
 * batchDeleteMessage
 */
export const useBatchDeleteMessageUsingPOST = (props: UseBatchDeleteMessageUsingPOSTProps) => useMutate<ResponseDTOOfobject | void, void, void, BatchDeleteMessageUsingPOSTBizidsRequestBody, void>("POST", `/olokoservice/message/batchDelete`, props);


export type BatchReadMessageUsingPUTProps = Omit<MutateProps<ResponseDTOOfListOfMessageDTO | void, void, void, BatchDeleteMessageUsingPOSTBizidsRequestBody, void>, "path" | "verb">;

/**
 * batchReadMessage
 */
export const BatchReadMessageUsingPUT = (props: BatchReadMessageUsingPUTProps) => (
  <Mutate<ResponseDTOOfListOfMessageDTO | void, void, void, BatchDeleteMessageUsingPOSTBizidsRequestBody, void>
    verb="PUT"
    path={`/olokoservice/message/batchRead`}
    
    {...props}
  />
);

export type UseBatchReadMessageUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfListOfMessageDTO | void, void, void, BatchDeleteMessageUsingPOSTBizidsRequestBody, void>, "path" | "verb">;

/**
 * batchReadMessage
 */
export const useBatchReadMessageUsingPUT = (props: UseBatchReadMessageUsingPUTProps) => useMutate<ResponseDTOOfListOfMessageDTO | void, void, void, BatchDeleteMessageUsingPOSTBizidsRequestBody, void>("PUT", `/olokoservice/message/batchRead`, props);


export interface GetMessageUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetMessageUsingGETProps = Omit<GetProps<ResponseDTOOfMessageDTO, void, void, GetMessageUsingGETPathParams>, "path"> & GetMessageUsingGETPathParams;

/**
 * getMessage
 */
export const GetMessageUsingGET = ({bizId, ...props}: GetMessageUsingGETProps) => (
  <Get<ResponseDTOOfMessageDTO, void, void, GetMessageUsingGETPathParams>
    path={`/olokoservice/message/${bizId}`}
    
    {...props}
  />
);

export type UseGetMessageUsingGETProps = Omit<UseGetProps<ResponseDTOOfMessageDTO, void, void, GetMessageUsingGETPathParams>, "path"> & GetMessageUsingGETPathParams;

/**
 * getMessage
 */
export const useGetMessageUsingGET = ({bizId, ...props}: UseGetMessageUsingGETProps) => useGet<ResponseDTOOfMessageDTO, void, void, GetMessageUsingGETPathParams>((paramsInPath: GetMessageUsingGETPathParams) => `/olokoservice/message/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteMessageUsingPOSTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteMessageUsingPOSTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteMessageUsingPOSTPathParams>, "path" | "verb"> & DeleteMessageUsingPOSTPathParams;

/**
 * deleteMessage
 */
export const DeleteMessageUsingPOST = ({bizId, ...props}: DeleteMessageUsingPOSTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteMessageUsingPOSTPathParams>
    verb="POST"
    path={`/olokoservice/message/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteMessageUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteMessageUsingPOSTPathParams>, "path" | "verb"> & DeleteMessageUsingPOSTPathParams;

/**
 * deleteMessage
 */
export const useDeleteMessageUsingPOST = ({bizId, ...props}: UseDeleteMessageUsingPOSTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteMessageUsingPOSTPathParams>("POST", (paramsInPath: DeleteMessageUsingPOSTPathParams) => `/olokoservice/message/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface ReadMessageUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type ReadMessageUsingPUTProps = Omit<MutateProps<ResponseDTOOfMessageDTO | void, void, void, void, ReadMessageUsingPUTPathParams>, "path" | "verb"> & ReadMessageUsingPUTPathParams;

/**
 * readMessage
 */
export const ReadMessageUsingPUT = ({bizId, ...props}: ReadMessageUsingPUTProps) => (
  <Mutate<ResponseDTOOfMessageDTO | void, void, void, void, ReadMessageUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/message/${bizId}/read`}
    
    {...props}
  />
);

export type UseReadMessageUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfMessageDTO | void, void, void, void, ReadMessageUsingPUTPathParams>, "path" | "verb"> & ReadMessageUsingPUTPathParams;

/**
 * readMessage
 */
export const useReadMessageUsingPUT = ({bizId, ...props}: UseReadMessageUsingPUTProps) => useMutate<ResponseDTOOfMessageDTO | void, void, void, void, ReadMessageUsingPUTPathParams>("PUT", (paramsInPath: ReadMessageUsingPUTPathParams) => `/olokoservice/message/${paramsInPath.bizId}/read`, {  pathParams: { bizId }, ...props });


export interface GetOperateLogsUsingGETQueryParams {
  /**
   * accountBizId
   */
  accountBizId?: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
  /**
   * userBIzId
   */
  userBIzId?: string;
}

export type GetOperateLogsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfOperateLogDTO, void, GetOperateLogsUsingGETQueryParams, void>, "path">;

/**
 * getOperateLogs
 */
export const GetOperateLogsUsingGET = (props: GetOperateLogsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfOperateLogDTO, void, GetOperateLogsUsingGETQueryParams, void>
    path={`/olokoservice/operate`}
    
    {...props}
  />
);

export type UseGetOperateLogsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfOperateLogDTO, void, GetOperateLogsUsingGETQueryParams, void>, "path">;

/**
 * getOperateLogs
 */
export const useGetOperateLogsUsingGET = (props: UseGetOperateLogsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfOperateLogDTO, void, GetOperateLogsUsingGETQueryParams, void>(`/olokoservice/operate`, props);


export type CreateOperateLogUsingPOSTProps = Omit<MutateProps<ResponseDTOOfOperateLogDTO | void, void, void, UpsertOperateLogRequestDTO, void>, "path" | "verb">;

/**
 * createOperateLog
 */
export const CreateOperateLogUsingPOST = (props: CreateOperateLogUsingPOSTProps) => (
  <Mutate<ResponseDTOOfOperateLogDTO | void, void, void, UpsertOperateLogRequestDTO, void>
    verb="POST"
    path={`/olokoservice/operate`}
    
    {...props}
  />
);

export type UseCreateOperateLogUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfOperateLogDTO | void, void, void, UpsertOperateLogRequestDTO, void>, "path" | "verb">;

/**
 * createOperateLog
 */
export const useCreateOperateLogUsingPOST = (props: UseCreateOperateLogUsingPOSTProps) => useMutate<ResponseDTOOfOperateLogDTO | void, void, void, UpsertOperateLogRequestDTO, void>("POST", `/olokoservice/operate`, props);


export interface GetOperateLogUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetOperateLogUsingGETProps = Omit<GetProps<ResponseDTOOfOperateLogDTO, void, void, GetOperateLogUsingGETPathParams>, "path"> & GetOperateLogUsingGETPathParams;

/**
 * getOperateLog
 */
export const GetOperateLogUsingGET = ({bizId, ...props}: GetOperateLogUsingGETProps) => (
  <Get<ResponseDTOOfOperateLogDTO, void, void, GetOperateLogUsingGETPathParams>
    path={`/olokoservice/operate/${bizId}`}
    
    {...props}
  />
);

export type UseGetOperateLogUsingGETProps = Omit<UseGetProps<ResponseDTOOfOperateLogDTO, void, void, GetOperateLogUsingGETPathParams>, "path"> & GetOperateLogUsingGETPathParams;

/**
 * getOperateLog
 */
export const useGetOperateLogUsingGET = ({bizId, ...props}: UseGetOperateLogUsingGETProps) => useGet<ResponseDTOOfOperateLogDTO, void, void, GetOperateLogUsingGETPathParams>((paramsInPath: GetOperateLogUsingGETPathParams) => `/olokoservice/operate/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface GetOperationsUsingGETQueryParams {
  /**
   * bizName
   */
  bizName?: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
}

export type GetOperationsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfOperationDTO, void, GetOperationsUsingGETQueryParams, void>, "path">;

/**
 * getOperations
 */
export const GetOperationsUsingGET = (props: GetOperationsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfOperationDTO, void, GetOperationsUsingGETQueryParams, void>
    path={`/olokoservice/operation`}
    
    {...props}
  />
);

export type UseGetOperationsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfOperationDTO, void, GetOperationsUsingGETQueryParams, void>, "path">;

/**
 * getOperations
 */
export const useGetOperationsUsingGET = (props: UseGetOperationsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfOperationDTO, void, GetOperationsUsingGETQueryParams, void>(`/olokoservice/operation`, props);


export type CreateOperationUsingPOSTProps = Omit<MutateProps<ResponseDTOOfOperationDTO | void, void, void, UpsertOperationRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createOperation
 */
export const CreateOperationUsingPOST = (props: CreateOperationUsingPOSTProps) => (
  <Mutate<ResponseDTOOfOperationDTO | void, void, void, UpsertOperationRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/operation`}
    
    {...props}
  />
);

export type UseCreateOperationUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfOperationDTO | void, void, void, UpsertOperationRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createOperation
 */
export const useCreateOperationUsingPOST = (props: UseCreateOperationUsingPOSTProps) => useMutate<ResponseDTOOfOperationDTO | void, void, void, UpsertOperationRequestDTORequestBody, void>("POST", `/olokoservice/operation`, props);


export interface GetOperationUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetOperationUsingGETProps = Omit<GetProps<ResponseDTOOfOperationDTO, void, void, GetOperationUsingGETPathParams>, "path"> & GetOperationUsingGETPathParams;

/**
 * getOperation
 */
export const GetOperationUsingGET = ({bizId, ...props}: GetOperationUsingGETProps) => (
  <Get<ResponseDTOOfOperationDTO, void, void, GetOperationUsingGETPathParams>
    path={`/olokoservice/operation/${bizId}`}
    
    {...props}
  />
);

export type UseGetOperationUsingGETProps = Omit<UseGetProps<ResponseDTOOfOperationDTO, void, void, GetOperationUsingGETPathParams>, "path"> & GetOperationUsingGETPathParams;

/**
 * getOperation
 */
export const useGetOperationUsingGET = ({bizId, ...props}: UseGetOperationUsingGETProps) => useGet<ResponseDTOOfOperationDTO, void, void, GetOperationUsingGETPathParams>((paramsInPath: GetOperationUsingGETPathParams) => `/olokoservice/operation/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateOperationUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateOperationUsingPUTProps = Omit<MutateProps<ResponseDTOOfOperationDTO | void, void, void, UpsertOperationRequestDTORequestBody, UpdateOperationUsingPUTPathParams>, "path" | "verb"> & UpdateOperationUsingPUTPathParams;

/**
 * updateOperation
 */
export const UpdateOperationUsingPUT = ({bizId, ...props}: UpdateOperationUsingPUTProps) => (
  <Mutate<ResponseDTOOfOperationDTO | void, void, void, UpsertOperationRequestDTORequestBody, UpdateOperationUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/operation/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateOperationUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfOperationDTO | void, void, void, UpsertOperationRequestDTORequestBody, UpdateOperationUsingPUTPathParams>, "path" | "verb"> & UpdateOperationUsingPUTPathParams;

/**
 * updateOperation
 */
export const useUpdateOperationUsingPUT = ({bizId, ...props}: UseUpdateOperationUsingPUTProps) => useMutate<ResponseDTOOfOperationDTO | void, void, void, UpsertOperationRequestDTORequestBody, UpdateOperationUsingPUTPathParams>("PUT", (paramsInPath: UpdateOperationUsingPUTPathParams) => `/olokoservice/operation/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface GetOrdersUsingGETQueryParams {
  /**
   * orderCode
   */
  orderCode?: string;
  /**
   * orderStatus
   */
  orderStatus?: string;
  /**
   * page
   */
  page?: number;
  /**
   * restaurantBizId
   */
  restaurantBizId?: string;
  /**
   * routeBizId
   */
  routeBizId?: string;
  /**
   * size
   */
  size?: number;
}

export type GetOrdersUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfOrderPlanDTO, void, GetOrdersUsingGETQueryParams, void>, "path">;

/**
 * getOrders
 */
export const GetOrdersUsingGET = (props: GetOrdersUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfOrderPlanDTO, void, GetOrdersUsingGETQueryParams, void>
    path={`/olokoservice/order-plan`}
    
    {...props}
  />
);

export type UseGetOrdersUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfOrderPlanDTO, void, GetOrdersUsingGETQueryParams, void>, "path">;

/**
 * getOrders
 */
export const useGetOrdersUsingGET = (props: UseGetOrdersUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfOrderPlanDTO, void, GetOrdersUsingGETQueryParams, void>(`/olokoservice/order-plan`, props);


export type CreateOrderUsingPOSTProps = Omit<MutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertOrderPlanRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createOrder
 */
export const CreateOrderUsingPOST = (props: CreateOrderUsingPOSTProps) => (
  <Mutate<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertOrderPlanRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/order-plan`}
    
    {...props}
  />
);

export type UseCreateOrderUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertOrderPlanRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createOrder
 */
export const useCreateOrderUsingPOST = (props: UseCreateOrderUsingPOSTProps) => useMutate<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertOrderPlanRequestDTORequestBody, void>("POST", `/olokoservice/order-plan`, props);


export interface CancellationOrderUsingPOSTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type CancellationOrderUsingPOSTProps = Omit<MutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, void, CancellationOrderUsingPOSTPathParams>, "path" | "verb"> & CancellationOrderUsingPOSTPathParams;

/**
 * cancellationOrder
 */
export const CancellationOrderUsingPOST = ({bizId, ...props}: CancellationOrderUsingPOSTProps) => (
  <Mutate<ResponseDTOOfOrderPlanDTO | void, void, void, void, CancellationOrderUsingPOSTPathParams>
    verb="POST"
    path={`/olokoservice/order-plan/cancellation/${bizId}`}
    
    {...props}
  />
);

export type UseCancellationOrderUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, void, CancellationOrderUsingPOSTPathParams>, "path" | "verb"> & CancellationOrderUsingPOSTPathParams;

/**
 * cancellationOrder
 */
export const useCancellationOrderUsingPOST = ({bizId, ...props}: UseCancellationOrderUsingPOSTProps) => useMutate<ResponseDTOOfOrderPlanDTO | void, void, void, void, CancellationOrderUsingPOSTPathParams>("POST", (paramsInPath: CancellationOrderUsingPOSTPathParams) => `/olokoservice/order-plan/cancellation/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface CompletedOrderUsingPOSTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type CompletedOrderUsingPOSTProps = Omit<MutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, void, CompletedOrderUsingPOSTPathParams>, "path" | "verb"> & CompletedOrderUsingPOSTPathParams;

/**
 * completedOrder
 */
export const CompletedOrderUsingPOST = ({bizId, ...props}: CompletedOrderUsingPOSTProps) => (
  <Mutate<ResponseDTOOfOrderPlanDTO | void, void, void, void, CompletedOrderUsingPOSTPathParams>
    verb="POST"
    path={`/olokoservice/order-plan/completed/${bizId}`}
    
    {...props}
  />
);

export type UseCompletedOrderUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, void, CompletedOrderUsingPOSTPathParams>, "path" | "verb"> & CompletedOrderUsingPOSTPathParams;

/**
 * completedOrder
 */
export const useCompletedOrderUsingPOST = ({bizId, ...props}: UseCompletedOrderUsingPOSTProps) => useMutate<ResponseDTOOfOrderPlanDTO | void, void, void, void, CompletedOrderUsingPOSTPathParams>("POST", (paramsInPath: CompletedOrderUsingPOSTPathParams) => `/olokoservice/order-plan/completed/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export type DeliveryOrderUsingPUTProps = Omit<MutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertDeliveryOrderDTO, void>, "path" | "verb">;

/**
 * deliveryOrder
 */
export const DeliveryOrderUsingPUT = (props: DeliveryOrderUsingPUTProps) => (
  <Mutate<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertDeliveryOrderDTO, void>
    verb="PUT"
    path={`/olokoservice/order-plan/delivery`}
    
    {...props}
  />
);

export type UseDeliveryOrderUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertDeliveryOrderDTO, void>, "path" | "verb">;

/**
 * deliveryOrder
 */
export const useDeliveryOrderUsingPUT = (props: UseDeliveryOrderUsingPUTProps) => useMutate<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertDeliveryOrderDTO, void>("PUT", `/olokoservice/order-plan/delivery`, props);


export type PayOrderUsingPUTProps = Omit<MutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, string, void>, "path" | "verb">;

/**
 * payOrder
 */
export const PayOrderUsingPUT = (props: PayOrderUsingPUTProps) => (
  <Mutate<ResponseDTOOfOrderPlanDTO | void, void, void, string, void>
    verb="PUT"
    path={`/olokoservice/order-plan/pay`}
    
    {...props}
  />
);

export type UsePayOrderUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, string, void>, "path" | "verb">;

/**
 * payOrder
 */
export const usePayOrderUsingPUT = (props: UsePayOrderUsingPUTProps) => useMutate<ResponseDTOOfOrderPlanDTO | void, void, void, string, void>("PUT", `/olokoservice/order-plan/pay`, props);


export interface GetOrderUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetOrderUsingGETProps = Omit<GetProps<ResponseDTOOfOrderPlanDTO, void, void, GetOrderUsingGETPathParams>, "path"> & GetOrderUsingGETPathParams;

/**
 * getOrder
 */
export const GetOrderUsingGET = ({bizId, ...props}: GetOrderUsingGETProps) => (
  <Get<ResponseDTOOfOrderPlanDTO, void, void, GetOrderUsingGETPathParams>
    path={`/olokoservice/order-plan/${bizId}`}
    
    {...props}
  />
);

export type UseGetOrderUsingGETProps = Omit<UseGetProps<ResponseDTOOfOrderPlanDTO, void, void, GetOrderUsingGETPathParams>, "path"> & GetOrderUsingGETPathParams;

/**
 * getOrder
 */
export const useGetOrderUsingGET = ({bizId, ...props}: UseGetOrderUsingGETProps) => useGet<ResponseDTOOfOrderPlanDTO, void, void, GetOrderUsingGETPathParams>((paramsInPath: GetOrderUsingGETPathParams) => `/olokoservice/order-plan/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateOrderUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateOrderUsingPUTProps = Omit<MutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertOrderPlanRequestDTORequestBody, UpdateOrderUsingPUTPathParams>, "path" | "verb"> & UpdateOrderUsingPUTPathParams;

/**
 * updateOrder
 */
export const UpdateOrderUsingPUT = ({bizId, ...props}: UpdateOrderUsingPUTProps) => (
  <Mutate<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertOrderPlanRequestDTORequestBody, UpdateOrderUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/order-plan/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateOrderUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertOrderPlanRequestDTORequestBody, UpdateOrderUsingPUTPathParams>, "path" | "verb"> & UpdateOrderUsingPUTPathParams;

/**
 * updateOrder
 */
export const useUpdateOrderUsingPUT = ({bizId, ...props}: UseUpdateOrderUsingPUTProps) => useMutate<ResponseDTOOfOrderPlanDTO | void, void, void, UpsertOrderPlanRequestDTORequestBody, UpdateOrderUsingPUTPathParams>("PUT", (paramsInPath: UpdateOrderUsingPUTPathParams) => `/olokoservice/order-plan/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteOrderUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteOrderUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteOrderUsingPUTPathParams>, "path" | "verb"> & DeleteOrderUsingPUTPathParams;

/**
 * deleteOrder
 */
export const DeleteOrderUsingPUT = ({bizId, ...props}: DeleteOrderUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteOrderUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/order-plan/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteOrderUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteOrderUsingPUTPathParams>, "path" | "verb"> & DeleteOrderUsingPUTPathParams;

/**
 * deleteOrder
 */
export const useDeleteOrderUsingPUT = ({bizId, ...props}: UseDeleteOrderUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteOrderUsingPUTPathParams>("PUT", (paramsInPath: DeleteOrderUsingPUTPathParams) => `/olokoservice/order-plan/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export type HomeImageUploadUsingPOSTResponse = {[key: string]: any} | void

export type HomeImageUploadUsingPOSTProps = Omit<MutateProps<HomeImageUploadUsingPOSTResponse, void, void, void, void>, "path" | "verb">;

/**
 * homeImageUpload
 */
export const HomeImageUploadUsingPOST = (props: HomeImageUploadUsingPOSTProps) => (
  <Mutate<HomeImageUploadUsingPOSTResponse, void, void, void, void>
    verb="POST"
    path={`/olokoservice/oss/homeImageUpload`}
    
    {...props}
  />
);

export type UseHomeImageUploadUsingPOSTProps = Omit<UseMutateProps<HomeImageUploadUsingPOSTResponse, void, void, void, void>, "path" | "verb">;

/**
 * homeImageUpload
 */
export const useHomeImageUploadUsingPOST = (props: UseHomeImageUploadUsingPOSTProps) => useMutate<HomeImageUploadUsingPOSTResponse, void, void, void, void>("POST", `/olokoservice/oss/homeImageUpload`, props);


export interface GetProductsUsingGETQueryParams {
  /**
   * deleted
   */
  deleted?: boolean;
  /**
   * page
   */
  page?: number;
  /**
   * productName
   */
  productName?: string;
  /**
   * size
   */
  size?: number;
}

export type GetProductsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfProductDTO, void, GetProductsUsingGETQueryParams, void>, "path">;

/**
 * getProducts
 */
export const GetProductsUsingGET = (props: GetProductsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfProductDTO, void, GetProductsUsingGETQueryParams, void>
    path={`/olokoservice/product`}
    
    {...props}
  />
);

export type UseGetProductsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfProductDTO, void, GetProductsUsingGETQueryParams, void>, "path">;

/**
 * getProducts
 */
export const useGetProductsUsingGET = (props: UseGetProductsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfProductDTO, void, GetProductsUsingGETQueryParams, void>(`/olokoservice/product`, props);


export type CreateProductUsingPOSTProps = Omit<MutateProps<ResponseDTOOfProductDTO | void, void, void, UpsertProductRequestDTO, void>, "path" | "verb">;

/**
 * createProduct
 */
export const CreateProductUsingPOST = (props: CreateProductUsingPOSTProps) => (
  <Mutate<ResponseDTOOfProductDTO | void, void, void, UpsertProductRequestDTO, void>
    verb="POST"
    path={`/olokoservice/product`}
    
    {...props}
  />
);

export type UseCreateProductUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfProductDTO | void, void, void, UpsertProductRequestDTO, void>, "path" | "verb">;

/**
 * createProduct
 */
export const useCreateProductUsingPOST = (props: UseCreateProductUsingPOSTProps) => useMutate<ResponseDTOOfProductDTO | void, void, void, UpsertProductRequestDTO, void>("POST", `/olokoservice/product`, props);


export interface GetProductUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetProductUsingGETProps = Omit<GetProps<ResponseDTOOfProductDTO, void, void, GetProductUsingGETPathParams>, "path"> & GetProductUsingGETPathParams;

/**
 * getProduct
 */
export const GetProductUsingGET = ({bizId, ...props}: GetProductUsingGETProps) => (
  <Get<ResponseDTOOfProductDTO, void, void, GetProductUsingGETPathParams>
    path={`/olokoservice/product/${bizId}`}
    
    {...props}
  />
);

export type UseGetProductUsingGETProps = Omit<UseGetProps<ResponseDTOOfProductDTO, void, void, GetProductUsingGETPathParams>, "path"> & GetProductUsingGETPathParams;

/**
 * getProduct
 */
export const useGetProductUsingGET = ({bizId, ...props}: UseGetProductUsingGETProps) => useGet<ResponseDTOOfProductDTO, void, void, GetProductUsingGETPathParams>((paramsInPath: GetProductUsingGETPathParams) => `/olokoservice/product/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateProductUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateProductUsingPUTProps = Omit<MutateProps<ResponseDTOOfProductDTO | void, void, void, UpsertProductRequestDTO, UpdateProductUsingPUTPathParams>, "path" | "verb"> & UpdateProductUsingPUTPathParams;

/**
 * updateProduct
 */
export const UpdateProductUsingPUT = ({bizId, ...props}: UpdateProductUsingPUTProps) => (
  <Mutate<ResponseDTOOfProductDTO | void, void, void, UpsertProductRequestDTO, UpdateProductUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/product/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateProductUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfProductDTO | void, void, void, UpsertProductRequestDTO, UpdateProductUsingPUTPathParams>, "path" | "verb"> & UpdateProductUsingPUTPathParams;

/**
 * updateProduct
 */
export const useUpdateProductUsingPUT = ({bizId, ...props}: UseUpdateProductUsingPUTProps) => useMutate<ResponseDTOOfProductDTO | void, void, void, UpsertProductRequestDTO, UpdateProductUsingPUTPathParams>("PUT", (paramsInPath: UpdateProductUsingPUTPathParams) => `/olokoservice/product/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteProductUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteProductUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteProductUsingPUTPathParams>, "path" | "verb"> & DeleteProductUsingPUTPathParams;

/**
 * deleteProduct
 */
export const DeleteProductUsingPUT = ({bizId, ...props}: DeleteProductUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteProductUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/product/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteProductUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteProductUsingPUTPathParams>, "path" | "verb"> & DeleteProductUsingPUTPathParams;

/**
 * deleteProduct
 */
export const useDeleteProductUsingPUT = ({bizId, ...props}: UseDeleteProductUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteProductUsingPUTPathParams>("PUT", (paramsInPath: DeleteProductUsingPUTPathParams) => `/olokoservice/product/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface GetResponsesUsingGETQueryParams {
  /**
   * page
   */
  page?: number;
  /**
   * restaurantBizId
   */
  restaurantBizId?: string;
  /**
   * size
   */
  size?: number;
}

export type GetResponsesUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfRecoveryDTO, void, GetResponsesUsingGETQueryParams, void>, "path">;

/**
 * getResponses
 */
export const GetResponsesUsingGET = (props: GetResponsesUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfRecoveryDTO, void, GetResponsesUsingGETQueryParams, void>
    path={`/olokoservice/recovery`}
    
    {...props}
  />
);

export type UseGetResponsesUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfRecoveryDTO, void, GetResponsesUsingGETQueryParams, void>, "path">;

/**
 * getResponses
 */
export const useGetResponsesUsingGET = (props: UseGetResponsesUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfRecoveryDTO, void, GetResponsesUsingGETQueryParams, void>(`/olokoservice/recovery`, props);


export type CreateRecoveryUsingPOSTProps = Omit<MutateProps<ResponseDTOOfRecoveryDTO | void, void, void, UpsertRecoveryRequestDTO, void>, "path" | "verb">;

/**
 * createRecovery
 */
export const CreateRecoveryUsingPOST = (props: CreateRecoveryUsingPOSTProps) => (
  <Mutate<ResponseDTOOfRecoveryDTO | void, void, void, UpsertRecoveryRequestDTO, void>
    verb="POST"
    path={`/olokoservice/recovery`}
    
    {...props}
  />
);

export type UseCreateRecoveryUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfRecoveryDTO | void, void, void, UpsertRecoveryRequestDTO, void>, "path" | "verb">;

/**
 * createRecovery
 */
export const useCreateRecoveryUsingPOST = (props: UseCreateRecoveryUsingPOSTProps) => useMutate<ResponseDTOOfRecoveryDTO | void, void, void, UpsertRecoveryRequestDTO, void>("POST", `/olokoservice/recovery`, props);


export interface GetRecoveryUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetRecoveryUsingGETProps = Omit<GetProps<ResponseDTOOfRecoveryDTO, void, void, GetRecoveryUsingGETPathParams>, "path"> & GetRecoveryUsingGETPathParams;

/**
 * getRecovery
 */
export const GetRecoveryUsingGET = ({bizId, ...props}: GetRecoveryUsingGETProps) => (
  <Get<ResponseDTOOfRecoveryDTO, void, void, GetRecoveryUsingGETPathParams>
    path={`/olokoservice/recovery/${bizId}`}
    
    {...props}
  />
);

export type UseGetRecoveryUsingGETProps = Omit<UseGetProps<ResponseDTOOfRecoveryDTO, void, void, GetRecoveryUsingGETPathParams>, "path"> & GetRecoveryUsingGETPathParams;

/**
 * getRecovery
 */
export const useGetRecoveryUsingGET = ({bizId, ...props}: UseGetRecoveryUsingGETProps) => useGet<ResponseDTOOfRecoveryDTO, void, void, GetRecoveryUsingGETPathParams>((paramsInPath: GetRecoveryUsingGETPathParams) => `/olokoservice/recovery/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateRecoveryUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateRecoveryUsingPUTProps = Omit<MutateProps<ResponseDTOOfRecoveryDTO | void, void, void, UpsertRecoveryRequestDTO, UpdateRecoveryUsingPUTPathParams>, "path" | "verb"> & UpdateRecoveryUsingPUTPathParams;

/**
 * updateRecovery
 */
export const UpdateRecoveryUsingPUT = ({bizId, ...props}: UpdateRecoveryUsingPUTProps) => (
  <Mutate<ResponseDTOOfRecoveryDTO | void, void, void, UpsertRecoveryRequestDTO, UpdateRecoveryUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/recovery/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateRecoveryUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfRecoveryDTO | void, void, void, UpsertRecoveryRequestDTO, UpdateRecoveryUsingPUTPathParams>, "path" | "verb"> & UpdateRecoveryUsingPUTPathParams;

/**
 * updateRecovery
 */
export const useUpdateRecoveryUsingPUT = ({bizId, ...props}: UseUpdateRecoveryUsingPUTProps) => useMutate<ResponseDTOOfRecoveryDTO | void, void, void, UpsertRecoveryRequestDTO, UpdateRecoveryUsingPUTPathParams>("PUT", (paramsInPath: UpdateRecoveryUsingPUTPathParams) => `/olokoservice/recovery/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteRecoveryUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteRecoveryUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteRecoveryUsingPUTPathParams>, "path" | "verb"> & DeleteRecoveryUsingPUTPathParams;

/**
 * deleteRecovery
 */
export const DeleteRecoveryUsingPUT = ({bizId, ...props}: DeleteRecoveryUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteRecoveryUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/recovery/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteRecoveryUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteRecoveryUsingPUTPathParams>, "path" | "verb"> & DeleteRecoveryUsingPUTPathParams;

/**
 * deleteRecovery
 */
export const useDeleteRecoveryUsingPUT = ({bizId, ...props}: UseDeleteRecoveryUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteRecoveryUsingPUTPathParams>("PUT", (paramsInPath: DeleteRecoveryUsingPUTPathParams) => `/olokoservice/recovery/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface GetRestaurantsUsingGETQueryParams {
  /**
   * page
   */
  page?: number;
  /**
   * restaurantName
   */
  restaurantName?: string;
  /**
   * reviewerStatus
   */
  reviewerStatus?: string;
  /**
   * size
   */
  size?: number;
}

export type GetRestaurantsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfRestaurantDTO, void, GetRestaurantsUsingGETQueryParams, void>, "path">;

/**
 * getRestaurants
 */
export const GetRestaurantsUsingGET = (props: GetRestaurantsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfRestaurantDTO, void, GetRestaurantsUsingGETQueryParams, void>
    path={`/olokoservice/restaurant`}
    
    {...props}
  />
);

export type UseGetRestaurantsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfRestaurantDTO, void, GetRestaurantsUsingGETQueryParams, void>, "path">;

/**
 * getRestaurants
 */
export const useGetRestaurantsUsingGET = (props: UseGetRestaurantsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfRestaurantDTO, void, GetRestaurantsUsingGETQueryParams, void>(`/olokoservice/restaurant`, props);


export type CreateRestaurantUsingPOSTProps = Omit<MutateProps<ResponseDTOOfRestaurantDTO | void, void, void, UpsertRestaurantRequestDTO, void>, "path" | "verb">;

/**
 * createRestaurant
 */
export const CreateRestaurantUsingPOST = (props: CreateRestaurantUsingPOSTProps) => (
  <Mutate<ResponseDTOOfRestaurantDTO | void, void, void, UpsertRestaurantRequestDTO, void>
    verb="POST"
    path={`/olokoservice/restaurant`}
    
    {...props}
  />
);

export type UseCreateRestaurantUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfRestaurantDTO | void, void, void, UpsertRestaurantRequestDTO, void>, "path" | "verb">;

/**
 * createRestaurant
 */
export const useCreateRestaurantUsingPOST = (props: UseCreateRestaurantUsingPOSTProps) => useMutate<ResponseDTOOfRestaurantDTO | void, void, void, UpsertRestaurantRequestDTO, void>("POST", `/olokoservice/restaurant`, props);


export interface GetRestaurantBatchUsingGETQueryParams {
  /**
   * bizIds
   */
  bizIds: string;
}

export type GetRestaurantBatchUsingGETProps = Omit<GetProps<ResponseDTOOfListOfRestaurantDTO, void, GetRestaurantBatchUsingGETQueryParams, void>, "path">;

/**
 * getRestaurantBatch
 */
export const GetRestaurantBatchUsingGET = (props: GetRestaurantBatchUsingGETProps) => (
  <Get<ResponseDTOOfListOfRestaurantDTO, void, GetRestaurantBatchUsingGETQueryParams, void>
    path={`/olokoservice/restaurant/batch/bizIds`}
    
    {...props}
  />
);

export type UseGetRestaurantBatchUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfRestaurantDTO, void, GetRestaurantBatchUsingGETQueryParams, void>, "path">;

/**
 * getRestaurantBatch
 */
export const useGetRestaurantBatchUsingGET = (props: UseGetRestaurantBatchUsingGETProps) => useGet<ResponseDTOOfListOfRestaurantDTO, void, GetRestaurantBatchUsingGETQueryParams, void>(`/olokoservice/restaurant/batch/bizIds`, props);


export interface GetRestaurantUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetRestaurantUsingGETProps = Omit<GetProps<ResponseDTOOfRestaurantDTO, void, void, GetRestaurantUsingGETPathParams>, "path"> & GetRestaurantUsingGETPathParams;

/**
 * getRestaurant
 */
export const GetRestaurantUsingGET = ({bizId, ...props}: GetRestaurantUsingGETProps) => (
  <Get<ResponseDTOOfRestaurantDTO, void, void, GetRestaurantUsingGETPathParams>
    path={`/olokoservice/restaurant/${bizId}`}
    
    {...props}
  />
);

export type UseGetRestaurantUsingGETProps = Omit<UseGetProps<ResponseDTOOfRestaurantDTO, void, void, GetRestaurantUsingGETPathParams>, "path"> & GetRestaurantUsingGETPathParams;

/**
 * getRestaurant
 */
export const useGetRestaurantUsingGET = ({bizId, ...props}: UseGetRestaurantUsingGETProps) => useGet<ResponseDTOOfRestaurantDTO, void, void, GetRestaurantUsingGETPathParams>((paramsInPath: GetRestaurantUsingGETPathParams) => `/olokoservice/restaurant/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateRestaurantUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateRestaurantUsingPUTProps = Omit<MutateProps<ResponseDTOOfRestaurantDTO | void, void, void, UpsertRestaurantRequestDTO, UpdateRestaurantUsingPUTPathParams>, "path" | "verb"> & UpdateRestaurantUsingPUTPathParams;

/**
 * updateRestaurant
 */
export const UpdateRestaurantUsingPUT = ({bizId, ...props}: UpdateRestaurantUsingPUTProps) => (
  <Mutate<ResponseDTOOfRestaurantDTO | void, void, void, UpsertRestaurantRequestDTO, UpdateRestaurantUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/restaurant/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateRestaurantUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfRestaurantDTO | void, void, void, UpsertRestaurantRequestDTO, UpdateRestaurantUsingPUTPathParams>, "path" | "verb"> & UpdateRestaurantUsingPUTPathParams;

/**
 * updateRestaurant
 */
export const useUpdateRestaurantUsingPUT = ({bizId, ...props}: UseUpdateRestaurantUsingPUTProps) => useMutate<ResponseDTOOfRestaurantDTO | void, void, void, UpsertRestaurantRequestDTO, UpdateRestaurantUsingPUTPathParams>("PUT", (paramsInPath: UpdateRestaurantUsingPUTPathParams) => `/olokoservice/restaurant/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface AddUserToRestaurantUsingPUTQueryParams {
  /**
   * userBizId
   */
  userBizId?: string;
}

export interface AddUserToRestaurantUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type AddUserToRestaurantUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, AddUserToRestaurantUsingPUTQueryParams, void, AddUserToRestaurantUsingPUTPathParams>, "path" | "verb"> & AddUserToRestaurantUsingPUTPathParams;

/**
 * addUserToRestaurant
 */
export const AddUserToRestaurantUsingPUT = ({bizId, ...props}: AddUserToRestaurantUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, AddUserToRestaurantUsingPUTQueryParams, void, AddUserToRestaurantUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/restaurant/${bizId}/adduser`}
    
    {...props}
  />
);

export type UseAddUserToRestaurantUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, AddUserToRestaurantUsingPUTQueryParams, void, AddUserToRestaurantUsingPUTPathParams>, "path" | "verb"> & AddUserToRestaurantUsingPUTPathParams;

/**
 * addUserToRestaurant
 */
export const useAddUserToRestaurantUsingPUT = ({bizId, ...props}: UseAddUserToRestaurantUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, AddUserToRestaurantUsingPUTQueryParams, void, AddUserToRestaurantUsingPUTPathParams>("PUT", (paramsInPath: AddUserToRestaurantUsingPUTPathParams) => `/olokoservice/restaurant/${paramsInPath.bizId}/adduser`, {  pathParams: { bizId }, ...props });


export interface ApprovedRestaurantUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type ApprovedRestaurantUsingPUTProps = Omit<MutateProps<ResponseDTOOfRestaurantDTO | void, void, void, void, ApprovedRestaurantUsingPUTPathParams>, "path" | "verb"> & ApprovedRestaurantUsingPUTPathParams;

/**
 * approvedRestaurant
 */
export const ApprovedRestaurantUsingPUT = ({bizId, ...props}: ApprovedRestaurantUsingPUTProps) => (
  <Mutate<ResponseDTOOfRestaurantDTO | void, void, void, void, ApprovedRestaurantUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/restaurant/${bizId}/approved`}
    
    {...props}
  />
);

export type UseApprovedRestaurantUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfRestaurantDTO | void, void, void, void, ApprovedRestaurantUsingPUTPathParams>, "path" | "verb"> & ApprovedRestaurantUsingPUTPathParams;

/**
 * approvedRestaurant
 */
export const useApprovedRestaurantUsingPUT = ({bizId, ...props}: UseApprovedRestaurantUsingPUTProps) => useMutate<ResponseDTOOfRestaurantDTO | void, void, void, void, ApprovedRestaurantUsingPUTPathParams>("PUT", (paramsInPath: ApprovedRestaurantUsingPUTPathParams) => `/olokoservice/restaurant/${paramsInPath.bizId}/approved`, {  pathParams: { bizId }, ...props });


export interface DeleteRestaurantUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteRestaurantUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteRestaurantUsingPUTPathParams>, "path" | "verb"> & DeleteRestaurantUsingPUTPathParams;

/**
 * deleteRestaurant
 */
export const DeleteRestaurantUsingPUT = ({bizId, ...props}: DeleteRestaurantUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteRestaurantUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/restaurant/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteRestaurantUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteRestaurantUsingPUTPathParams>, "path" | "verb"> & DeleteRestaurantUsingPUTPathParams;

/**
 * deleteRestaurant
 */
export const useDeleteRestaurantUsingPUT = ({bizId, ...props}: UseDeleteRestaurantUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteRestaurantUsingPUTPathParams>("PUT", (paramsInPath: DeleteRestaurantUsingPUTPathParams) => `/olokoservice/restaurant/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface RejectedRestaurantUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type RejectedRestaurantUsingPUTProps = Omit<MutateProps<ResponseDTOOfRestaurantDTO | void, void, void, void, RejectedRestaurantUsingPUTPathParams>, "path" | "verb"> & RejectedRestaurantUsingPUTPathParams;

/**
 * rejectedRestaurant
 */
export const RejectedRestaurantUsingPUT = ({bizId, ...props}: RejectedRestaurantUsingPUTProps) => (
  <Mutate<ResponseDTOOfRestaurantDTO | void, void, void, void, RejectedRestaurantUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/restaurant/${bizId}/rejected`}
    
    {...props}
  />
);

export type UseRejectedRestaurantUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfRestaurantDTO | void, void, void, void, RejectedRestaurantUsingPUTPathParams>, "path" | "verb"> & RejectedRestaurantUsingPUTPathParams;

/**
 * rejectedRestaurant
 */
export const useRejectedRestaurantUsingPUT = ({bizId, ...props}: UseRejectedRestaurantUsingPUTProps) => useMutate<ResponseDTOOfRestaurantDTO | void, void, void, void, RejectedRestaurantUsingPUTPathParams>("PUT", (paramsInPath: RejectedRestaurantUsingPUTPathParams) => `/olokoservice/restaurant/${paramsInPath.bizId}/rejected`, {  pathParams: { bizId }, ...props });


export interface RemoveUserFormRestaurantUsingPUTQueryParams {
  /**
   * userBizId
   */
  userBizId?: string;
}

export interface RemoveUserFormRestaurantUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type RemoveUserFormRestaurantUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, RemoveUserFormRestaurantUsingPUTQueryParams, void, RemoveUserFormRestaurantUsingPUTPathParams>, "path" | "verb"> & RemoveUserFormRestaurantUsingPUTPathParams;

/**
 * removeUserFormRestaurant
 */
export const RemoveUserFormRestaurantUsingPUT = ({bizId, ...props}: RemoveUserFormRestaurantUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, RemoveUserFormRestaurantUsingPUTQueryParams, void, RemoveUserFormRestaurantUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/restaurant/${bizId}/removeuser`}
    
    {...props}
  />
);

export type UseRemoveUserFormRestaurantUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, RemoveUserFormRestaurantUsingPUTQueryParams, void, RemoveUserFormRestaurantUsingPUTPathParams>, "path" | "verb"> & RemoveUserFormRestaurantUsingPUTPathParams;

/**
 * removeUserFormRestaurant
 */
export const useRemoveUserFormRestaurantUsingPUT = ({bizId, ...props}: UseRemoveUserFormRestaurantUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, RemoveUserFormRestaurantUsingPUTQueryParams, void, RemoveUserFormRestaurantUsingPUTPathParams>("PUT", (paramsInPath: RemoveUserFormRestaurantUsingPUTPathParams) => `/olokoservice/restaurant/${paramsInPath.bizId}/removeuser`, {  pathParams: { bizId }, ...props });


export interface GetRestaurantUsersUsingGETQueryParams {
  /**
   * name
   */
  name?: string;
}

export interface GetRestaurantUsersUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetRestaurantUsersUsingGETProps = Omit<GetProps<ResponseDTOOfListOfAccountUserDTO, void, GetRestaurantUsersUsingGETQueryParams, GetRestaurantUsersUsingGETPathParams>, "path"> & GetRestaurantUsersUsingGETPathParams;

/**
 * getRestaurantUsers
 */
export const GetRestaurantUsersUsingGET = ({bizId, ...props}: GetRestaurantUsersUsingGETProps) => (
  <Get<ResponseDTOOfListOfAccountUserDTO, void, GetRestaurantUsersUsingGETQueryParams, GetRestaurantUsersUsingGETPathParams>
    path={`/olokoservice/restaurant/${bizId}/user`}
    
    {...props}
  />
);

export type UseGetRestaurantUsersUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfAccountUserDTO, void, GetRestaurantUsersUsingGETQueryParams, GetRestaurantUsersUsingGETPathParams>, "path"> & GetRestaurantUsersUsingGETPathParams;

/**
 * getRestaurantUsers
 */
export const useGetRestaurantUsersUsingGET = ({bizId, ...props}: UseGetRestaurantUsersUsingGETProps) => useGet<ResponseDTOOfListOfAccountUserDTO, void, GetRestaurantUsersUsingGETQueryParams, GetRestaurantUsersUsingGETPathParams>((paramsInPath: GetRestaurantUsersUsingGETPathParams) => `/olokoservice/restaurant/${paramsInPath.bizId}/user`, {  pathParams: { bizId }, ...props });


export interface GetRoutesUsingGETQueryParams {
  /**
   * page
   */
  page?: number;
  /**
   * routeName
   */
  routeName?: string;
  /**
   * size
   */
  size?: number;
}

export type GetRoutesUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfRouteDTO, void, GetRoutesUsingGETQueryParams, void>, "path">;

/**
 * getRoutes
 */
export const GetRoutesUsingGET = (props: GetRoutesUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfRouteDTO, void, GetRoutesUsingGETQueryParams, void>
    path={`/olokoservice/route`}
    
    {...props}
  />
);

export type UseGetRoutesUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfRouteDTO, void, GetRoutesUsingGETQueryParams, void>, "path">;

/**
 * getRoutes
 */
export const useGetRoutesUsingGET = (props: UseGetRoutesUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfRouteDTO, void, GetRoutesUsingGETQueryParams, void>(`/olokoservice/route`, props);


export type CreateRouteUsingPOSTProps = Omit<MutateProps<ResponseDTOOfRouteDTO | void, void, void, UpsertRouteRequestDTO, void>, "path" | "verb">;

/**
 * createRoute
 */
export const CreateRouteUsingPOST = (props: CreateRouteUsingPOSTProps) => (
  <Mutate<ResponseDTOOfRouteDTO | void, void, void, UpsertRouteRequestDTO, void>
    verb="POST"
    path={`/olokoservice/route`}
    
    {...props}
  />
);

export type UseCreateRouteUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfRouteDTO | void, void, void, UpsertRouteRequestDTO, void>, "path" | "verb">;

/**
 * createRoute
 */
export const useCreateRouteUsingPOST = (props: UseCreateRouteUsingPOSTProps) => useMutate<ResponseDTOOfRouteDTO | void, void, void, UpsertRouteRequestDTO, void>("POST", `/olokoservice/route`, props);


export interface GetRouteUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetRouteUsingGETProps = Omit<GetProps<ResponseDTOOfRouteDTO, void, void, GetRouteUsingGETPathParams>, "path"> & GetRouteUsingGETPathParams;

/**
 * getRoute
 */
export const GetRouteUsingGET = ({bizId, ...props}: GetRouteUsingGETProps) => (
  <Get<ResponseDTOOfRouteDTO, void, void, GetRouteUsingGETPathParams>
    path={`/olokoservice/route/${bizId}`}
    
    {...props}
  />
);

export type UseGetRouteUsingGETProps = Omit<UseGetProps<ResponseDTOOfRouteDTO, void, void, GetRouteUsingGETPathParams>, "path"> & GetRouteUsingGETPathParams;

/**
 * getRoute
 */
export const useGetRouteUsingGET = ({bizId, ...props}: UseGetRouteUsingGETProps) => useGet<ResponseDTOOfRouteDTO, void, void, GetRouteUsingGETPathParams>((paramsInPath: GetRouteUsingGETPathParams) => `/olokoservice/route/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateRouteUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateRouteUsingPUTProps = Omit<MutateProps<ResponseDTOOfRouteDTO | void, void, void, UpsertRouteRequestDTO, UpdateRouteUsingPUTPathParams>, "path" | "verb"> & UpdateRouteUsingPUTPathParams;

/**
 * updateRoute
 */
export const UpdateRouteUsingPUT = ({bizId, ...props}: UpdateRouteUsingPUTProps) => (
  <Mutate<ResponseDTOOfRouteDTO | void, void, void, UpsertRouteRequestDTO, UpdateRouteUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/route/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateRouteUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfRouteDTO | void, void, void, UpsertRouteRequestDTO, UpdateRouteUsingPUTPathParams>, "path" | "verb"> & UpdateRouteUsingPUTPathParams;

/**
 * updateRoute
 */
export const useUpdateRouteUsingPUT = ({bizId, ...props}: UseUpdateRouteUsingPUTProps) => useMutate<ResponseDTOOfRouteDTO | void, void, void, UpsertRouteRequestDTO, UpdateRouteUsingPUTPathParams>("PUT", (paramsInPath: UpdateRouteUsingPUTPathParams) => `/olokoservice/route/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteRouteUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteRouteUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteRouteUsingPUTPathParams>, "path" | "verb"> & DeleteRouteUsingPUTPathParams;

/**
 * deleteRoute
 */
export const DeleteRouteUsingPUT = ({bizId, ...props}: DeleteRouteUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteRouteUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/route/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteRouteUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteRouteUsingPUTPathParams>, "path" | "verb"> & DeleteRouteUsingPUTPathParams;

/**
 * deleteRoute
 */
export const useDeleteRouteUsingPUT = ({bizId, ...props}: UseDeleteRouteUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteRouteUsingPUTPathParams>("PUT", (paramsInPath: DeleteRouteUsingPUTPathParams) => `/olokoservice/route/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface GetBoxSelectsUsingGETQueryParams {
  /**
   * boxName
   */
  boxName?: string;
}

export type GetBoxSelectsUsingGETProps = Omit<GetProps<ResponseDTOOfListOfSelectDTO, void, GetBoxSelectsUsingGETQueryParams, void>, "path">;

/**
 * getBoxSelects
 */
export const GetBoxSelectsUsingGET = (props: GetBoxSelectsUsingGETProps) => (
  <Get<ResponseDTOOfListOfSelectDTO, void, GetBoxSelectsUsingGETQueryParams, void>
    path={`/olokoservice/select-component/boxes`}
    
    {...props}
  />
);

export type UseGetBoxSelectsUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfSelectDTO, void, GetBoxSelectsUsingGETQueryParams, void>, "path">;

/**
 * getBoxSelects
 */
export const useGetBoxSelectsUsingGET = (props: UseGetBoxSelectsUsingGETProps) => useGet<ResponseDTOOfListOfSelectDTO, void, GetBoxSelectsUsingGETQueryParams, void>(`/olokoservice/select-component/boxes`, props);


export interface GetCascadeDepartmentsUsingGETQueryParams {
  /**
   * accountBizId
   */
  accountBizId?: string;
  /**
   * name
   */
  name?: string;
  /**
   * parentDepartmentBizId
   */
  parentDepartmentBizId?: string;
  /**
   * userBizId
   */
  userBizId?: string;
}

export type GetCascadeDepartmentsUsingGETProps = Omit<GetProps<ResponseDTO, void, GetCascadeDepartmentsUsingGETQueryParams, void>, "path">;

/**
 * getCascadeDepartments
 */
export const GetCascadeDepartmentsUsingGET = (props: GetCascadeDepartmentsUsingGETProps) => (
  <Get<ResponseDTO, void, GetCascadeDepartmentsUsingGETQueryParams, void>
    path={`/olokoservice/select-component/cascade-departments`}
    
    {...props}
  />
);

export type UseGetCascadeDepartmentsUsingGETProps = Omit<UseGetProps<ResponseDTO, void, GetCascadeDepartmentsUsingGETQueryParams, void>, "path">;

/**
 * getCascadeDepartments
 */
export const useGetCascadeDepartmentsUsingGET = (props: UseGetCascadeDepartmentsUsingGETProps) => useGet<ResponseDTO, void, GetCascadeDepartmentsUsingGETQueryParams, void>(`/olokoservice/select-component/cascade-departments`, props);


export interface GetCustomDomainObjectSelectNameNumUsingGETQueryParams {
  /**
   * accountBizId
   */
  accountBizId?: string;
  /**
   * customDomainObjectTemplateBizName
   */
  customDomainObjectTemplateBizName?: string;
  /**
   * customQuery
   */
  customQuery?: string;
  /**
   * displayName
   */
  displayName?: string;
}

export type GetCustomDomainObjectSelectNameNumUsingGETProps = Omit<GetProps<ResponseDTOOfListOfSelectDTO, void, GetCustomDomainObjectSelectNameNumUsingGETQueryParams, void>, "path">;

/**
 * getCustomDomainObjectSelectNameNum
 */
export const GetCustomDomainObjectSelectNameNumUsingGET = (props: GetCustomDomainObjectSelectNameNumUsingGETProps) => (
  <Get<ResponseDTOOfListOfSelectDTO, void, GetCustomDomainObjectSelectNameNumUsingGETQueryParams, void>
    path={`/olokoservice/select-component/customName-customNum`}
    
    {...props}
  />
);

export type UseGetCustomDomainObjectSelectNameNumUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfSelectDTO, void, GetCustomDomainObjectSelectNameNumUsingGETQueryParams, void>, "path">;

/**
 * getCustomDomainObjectSelectNameNum
 */
export const useGetCustomDomainObjectSelectNameNumUsingGET = (props: UseGetCustomDomainObjectSelectNameNumUsingGETProps) => useGet<ResponseDTOOfListOfSelectDTO, void, GetCustomDomainObjectSelectNameNumUsingGETQueryParams, void>(`/olokoservice/select-component/customName-customNum`, props);


export interface GetCustomDomainObjectSelectsUsingGETQueryParams {
  /**
   * accountBizId
   */
  accountBizId?: string;
  /**
   * customDomainObjectTemplateBizName
   */
  customDomainObjectTemplateBizName?: string;
  /**
   * customQuery
   */
  customQuery?: string;
  /**
   * customQueryIdentifier
   */
  customQueryIdentifier?: string;
  /**
   * displayName
   */
  displayName?: string;
}

export type GetCustomDomainObjectSelectsUsingGETProps = Omit<GetProps<ResponseDTOOfListOfSelectDTO, void, GetCustomDomainObjectSelectsUsingGETQueryParams, void>, "path">;

/**
 * getCustomDomainObjectSelects
 */
export const GetCustomDomainObjectSelectsUsingGET = (props: GetCustomDomainObjectSelectsUsingGETProps) => (
  <Get<ResponseDTOOfListOfSelectDTO, void, GetCustomDomainObjectSelectsUsingGETQueryParams, void>
    path={`/olokoservice/select-component/customs`}
    
    {...props}
  />
);

export type UseGetCustomDomainObjectSelectsUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfSelectDTO, void, GetCustomDomainObjectSelectsUsingGETQueryParams, void>, "path">;

/**
 * getCustomDomainObjectSelects
 */
export const useGetCustomDomainObjectSelectsUsingGET = (props: UseGetCustomDomainObjectSelectsUsingGETProps) => useGet<ResponseDTOOfListOfSelectDTO, void, GetCustomDomainObjectSelectsUsingGETQueryParams, void>(`/olokoservice/select-component/customs`, props);


export interface GetCurrentDepartmentUserUsingGETQueryParams {
  /**
   * userAuthorityName
   */
  userAuthorityName?: string;
}

export type GetCurrentDepartmentUserUsingGETProps = Omit<GetProps<ResponseDTOOfSelectDTO, void, GetCurrentDepartmentUserUsingGETQueryParams, void>, "path">;

/**
 * getCurrentDepartmentUser
 */
export const GetCurrentDepartmentUserUsingGET = (props: GetCurrentDepartmentUserUsingGETProps) => (
  <Get<ResponseDTOOfSelectDTO, void, GetCurrentDepartmentUserUsingGETQueryParams, void>
    path={`/olokoservice/select-component/department/current/user`}
    
    {...props}
  />
);

export type UseGetCurrentDepartmentUserUsingGETProps = Omit<UseGetProps<ResponseDTOOfSelectDTO, void, GetCurrentDepartmentUserUsingGETQueryParams, void>, "path">;

/**
 * getCurrentDepartmentUser
 */
export const useGetCurrentDepartmentUserUsingGET = (props: UseGetCurrentDepartmentUserUsingGETProps) => useGet<ResponseDTOOfSelectDTO, void, GetCurrentDepartmentUserUsingGETQueryParams, void>(`/olokoservice/select-component/department/current/user`, props);


export interface GetDepartmentSelectsUsingGETQueryParams {
  /**
   * accountBizId
   */
  accountBizId?: string;
  /**
   * name
   */
  name?: string;
  /**
   * parentDepartmentBizId
   */
  parentDepartmentBizId?: string;
  /**
   * userBizId
   */
  userBizId?: string;
}

export type GetDepartmentSelectsUsingGETProps = Omit<GetProps<ResponseDTOOfListOfSelectDTO, void, GetDepartmentSelectsUsingGETQueryParams, void>, "path">;

/**
 * getDepartmentSelects
 */
export const GetDepartmentSelectsUsingGET = (props: GetDepartmentSelectsUsingGETProps) => (
  <Get<ResponseDTOOfListOfSelectDTO, void, GetDepartmentSelectsUsingGETQueryParams, void>
    path={`/olokoservice/select-component/departments`}
    
    {...props}
  />
);

export type UseGetDepartmentSelectsUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfSelectDTO, void, GetDepartmentSelectsUsingGETQueryParams, void>, "path">;

/**
 * getDepartmentSelects
 */
export const useGetDepartmentSelectsUsingGET = (props: UseGetDepartmentSelectsUsingGETProps) => useGet<ResponseDTOOfListOfSelectDTO, void, GetDepartmentSelectsUsingGETQueryParams, void>(`/olokoservice/select-component/departments`, props);


export interface GetProductSelectsUsingGETQueryParams {
  /**
   * productName
   */
  productName?: string;
}

export type GetProductSelectsUsingGETProps = Omit<GetProps<ResponseDTOOfListOfSelectDTO, void, GetProductSelectsUsingGETQueryParams, void>, "path">;

/**
 * getProductSelects
 */
export const GetProductSelectsUsingGET = (props: GetProductSelectsUsingGETProps) => (
  <Get<ResponseDTOOfListOfSelectDTO, void, GetProductSelectsUsingGETQueryParams, void>
    path={`/olokoservice/select-component/products`}
    
    {...props}
  />
);

export type UseGetProductSelectsUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfSelectDTO, void, GetProductSelectsUsingGETQueryParams, void>, "path">;

/**
 * getProductSelects
 */
export const useGetProductSelectsUsingGET = (props: UseGetProductSelectsUsingGETProps) => useGet<ResponseDTOOfListOfSelectDTO, void, GetProductSelectsUsingGETQueryParams, void>(`/olokoservice/select-component/products`, props);


export interface GetProductsUsingGET1QueryParams {
  /**
   * restaurantBizId
   */
  restaurantBizId: string;
}

export type GetProductsUsingGET1Props = Omit<GetProps<ResponseDTOOfListOfProductDTO, void, GetProductsUsingGET1QueryParams, void>, "path">;

/**
 * getProducts
 */
export const GetProductsUsingGET1 = (props: GetProductsUsingGET1Props) => (
  <Get<ResponseDTOOfListOfProductDTO, void, GetProductsUsingGET1QueryParams, void>
    path={`/olokoservice/select-component/restaurant-products`}
    
    {...props}
  />
);

export type UseGetProductsUsingGET1Props = Omit<UseGetProps<ResponseDTOOfListOfProductDTO, void, GetProductsUsingGET1QueryParams, void>, "path">;

/**
 * getProducts
 */
export const useGetProductsUsingGET1 = (props: UseGetProductsUsingGET1Props) => useGet<ResponseDTOOfListOfProductDTO, void, GetProductsUsingGET1QueryParams, void>(`/olokoservice/select-component/restaurant-products`, props);


export interface GetRestaurantSelectsUsingGETQueryParams {
  /**
   * accountBizId
   */
  accountBizId?: string;
  /**
   * restaurantName
   */
  restaurantName?: string;
  /**
   * reviewerStatus
   */
  reviewerStatus?: string;
  /**
   * routeBizId
   */
  routeBizId?: string;
}

export type GetRestaurantSelectsUsingGETProps = Omit<GetProps<ResponseDTOOfListOfSelectDTO, void, GetRestaurantSelectsUsingGETQueryParams, void>, "path">;

/**
 * getRestaurantSelects
 */
export const GetRestaurantSelectsUsingGET = (props: GetRestaurantSelectsUsingGETProps) => (
  <Get<ResponseDTOOfListOfSelectDTO, void, GetRestaurantSelectsUsingGETQueryParams, void>
    path={`/olokoservice/select-component/restaurants`}
    
    {...props}
  />
);

export type UseGetRestaurantSelectsUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfSelectDTO, void, GetRestaurantSelectsUsingGETQueryParams, void>, "path">;

/**
 * getRestaurantSelects
 */
export const useGetRestaurantSelectsUsingGET = (props: UseGetRestaurantSelectsUsingGETProps) => useGet<ResponseDTOOfListOfSelectDTO, void, GetRestaurantSelectsUsingGETQueryParams, void>(`/olokoservice/select-component/restaurants`, props);


export interface GetRouteSelectsUsingGETQueryParams {
  /**
   * routeName
   */
  routeName?: string;
}

export type GetRouteSelectsUsingGETProps = Omit<GetProps<ResponseDTOOfListOfSelectDTO, void, GetRouteSelectsUsingGETQueryParams, void>, "path">;

/**
 * getRouteSelects
 */
export const GetRouteSelectsUsingGET = (props: GetRouteSelectsUsingGETProps) => (
  <Get<ResponseDTOOfListOfSelectDTO, void, GetRouteSelectsUsingGETQueryParams, void>
    path={`/olokoservice/select-component/routes`}
    
    {...props}
  />
);

export type UseGetRouteSelectsUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfSelectDTO, void, GetRouteSelectsUsingGETQueryParams, void>, "path">;

/**
 * getRouteSelects
 */
export const useGetRouteSelectsUsingGET = (props: UseGetRouteSelectsUsingGETProps) => useGet<ResponseDTOOfListOfSelectDTO, void, GetRouteSelectsUsingGETQueryParams, void>(`/olokoservice/select-component/routes`, props);


export type GetUserOfRestaurantUsingGETProps = Omit<GetProps<ResponseDTOOfListOfSelectDTO, void, void, void>, "path">;

/**
 * getUserOfRestaurant
 */
export const GetUserOfRestaurantUsingGET = (props: GetUserOfRestaurantUsingGETProps) => (
  <Get<ResponseDTOOfListOfSelectDTO, void, void, void>
    path={`/olokoservice/select-component/select-restaurants`}
    
    {...props}
  />
);

export type UseGetUserOfRestaurantUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfSelectDTO, void, void, void>, "path">;

/**
 * getUserOfRestaurant
 */
export const useGetUserOfRestaurantUsingGET = (props: UseGetUserOfRestaurantUsingGETProps) => useGet<ResponseDTOOfListOfSelectDTO, void, void, void>(`/olokoservice/select-component/select-restaurants`, props);


export interface GetUserOptionsUsingGETQueryParams {
  /**
   * accountBizId
   */
  accountBizId?: string;
  /**
   * departmentBizId
   */
  departmentBizId?: string;
  /**
   * restaurantBizId
   */
  restaurantBizId?: string;
}

export type GetUserOptionsUsingGETProps = Omit<GetProps<ResponseDTOOfListOfSelectDTO, void, GetUserOptionsUsingGETQueryParams, void>, "path">;

/**
 * getUserOptions
 */
export const GetUserOptionsUsingGET = (props: GetUserOptionsUsingGETProps) => (
  <Get<ResponseDTOOfListOfSelectDTO, void, GetUserOptionsUsingGETQueryParams, void>
    path={`/olokoservice/select-component/users`}
    
    {...props}
  />
);

export type UseGetUserOptionsUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfSelectDTO, void, GetUserOptionsUsingGETQueryParams, void>, "path">;

/**
 * getUserOptions
 */
export const useGetUserOptionsUsingGET = (props: UseGetUserOptionsUsingGETProps) => useGet<ResponseDTOOfListOfSelectDTO, void, GetUserOptionsUsingGETQueryParams, void>(`/olokoservice/select-component/users`, props);


export type GetSessionUsingGETProps = Omit<GetProps<ResponseDTOOfSessionDTO, void, void, void>, "path">;

/**
 * getSession
 */
export const GetSessionUsingGET = (props: GetSessionUsingGETProps) => (
  <Get<ResponseDTOOfSessionDTO, void, void, void>
    path={`/olokoservice/session`}
    
    {...props}
  />
);

export type UseGetSessionUsingGETProps = Omit<UseGetProps<ResponseDTOOfSessionDTO, void, void, void>, "path">;

/**
 * getSession
 */
export const useGetSessionUsingGET = (props: UseGetSessionUsingGETProps) => useGet<ResponseDTOOfSessionDTO, void, void, void>(`/olokoservice/session`, props);


export interface CreateSessionUsingPOSTQueryParams {
  /**
   * shouldValidateMobile
   */
  shouldValidateMobile?: boolean;
}

export type CreateSessionUsingPOSTProps = Omit<MutateProps<ResponseDTOOfSessionDTO | void, void, CreateSessionUsingPOSTQueryParams, CreateSessionRequestDTO, void>, "path" | "verb">;

/**
 * createSession
 */
export const CreateSessionUsingPOST = (props: CreateSessionUsingPOSTProps) => (
  <Mutate<ResponseDTOOfSessionDTO | void, void, CreateSessionUsingPOSTQueryParams, CreateSessionRequestDTO, void>
    verb="POST"
    path={`/olokoservice/session`}
    
    {...props}
  />
);

export type UseCreateSessionUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfSessionDTO | void, void, CreateSessionUsingPOSTQueryParams, CreateSessionRequestDTO, void>, "path" | "verb">;

/**
 * createSession
 */
export const useCreateSessionUsingPOST = (props: UseCreateSessionUsingPOSTProps) => useMutate<ResponseDTOOfSessionDTO | void, void, CreateSessionUsingPOSTQueryParams, CreateSessionRequestDTO, void>("POST", `/olokoservice/session`, props);


export interface SwitchAccountUsingPOSTPathParams {
  /**
   * accountBizId
   */
  accountBizId: string
}

export type SwitchAccountUsingPOSTProps = Omit<MutateProps<ResponseDTOOfstring | void, void, void, void, SwitchAccountUsingPOSTPathParams>, "path" | "verb"> & SwitchAccountUsingPOSTPathParams;

/**
 * switchAccount
 */
export const SwitchAccountUsingPOST = ({accountBizId, ...props}: SwitchAccountUsingPOSTProps) => (
  <Mutate<ResponseDTOOfstring | void, void, void, void, SwitchAccountUsingPOSTPathParams>
    verb="POST"
    path={`/olokoservice/session/account/${accountBizId}/switch`}
    
    {...props}
  />
);

export type UseSwitchAccountUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfstring | void, void, void, void, SwitchAccountUsingPOSTPathParams>, "path" | "verb"> & SwitchAccountUsingPOSTPathParams;

/**
 * switchAccount
 */
export const useSwitchAccountUsingPOST = ({accountBizId, ...props}: UseSwitchAccountUsingPOSTProps) => useMutate<ResponseDTOOfstring | void, void, void, void, SwitchAccountUsingPOSTPathParams>("POST", (paramsInPath: SwitchAccountUsingPOSTPathParams) => `/olokoservice/session/account/${paramsInPath.accountBizId}/switch`, {  pathParams: { accountBizId }, ...props });


export type DeleteSessionUsingPOSTProps = Omit<MutateProps<ResponseDTO | void, void, void, void, void>, "path" | "verb">;

/**
 * deleteSession
 */
export const DeleteSessionUsingPOST = (props: DeleteSessionUsingPOSTProps) => (
  <Mutate<ResponseDTO | void, void, void, void, void>
    verb="POST"
    path={`/olokoservice/session/delete`}
    
    {...props}
  />
);

export type UseDeleteSessionUsingPOSTProps = Omit<UseMutateProps<ResponseDTO | void, void, void, void, void>, "path" | "verb">;

/**
 * deleteSession
 */
export const useDeleteSessionUsingPOST = (props: UseDeleteSessionUsingPOSTProps) => useMutate<ResponseDTO | void, void, void, void, void>("POST", `/olokoservice/session/delete`, props);


export type SendRegisterVerificationCodeUsingPOSTProps = Omit<MutateProps<ResponseDTOOfstring | void, void, void, SendSmsRequestDTORequestBody, void>, "path" | "verb">;

/**
 * sendRegisterVerificationCode
 */
export const SendRegisterVerificationCodeUsingPOST = (props: SendRegisterVerificationCodeUsingPOSTProps) => (
  <Mutate<ResponseDTOOfstring | void, void, void, SendSmsRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/sms/verificationCode/register`}
    
    {...props}
  />
);

export type UseSendRegisterVerificationCodeUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfstring | void, void, void, SendSmsRequestDTORequestBody, void>, "path" | "verb">;

/**
 * sendRegisterVerificationCode
 */
export const useSendRegisterVerificationCodeUsingPOST = (props: UseSendRegisterVerificationCodeUsingPOSTProps) => useMutate<ResponseDTOOfstring | void, void, void, SendSmsRequestDTORequestBody, void>("POST", `/olokoservice/sms/verificationCode/register`, props);


export type SendResetPasswordVerificationCodeUsingPOSTProps = Omit<MutateProps<ResponseDTOOfstring | void, void, void, SendSmsRequestDTORequestBody, void>, "path" | "verb">;

/**
 * sendResetPasswordVerificationCode
 */
export const SendResetPasswordVerificationCodeUsingPOST = (props: SendResetPasswordVerificationCodeUsingPOSTProps) => (
  <Mutate<ResponseDTOOfstring | void, void, void, SendSmsRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/sms/verificationCode/reset-password`}
    
    {...props}
  />
);

export type UseSendResetPasswordVerificationCodeUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfstring | void, void, void, SendSmsRequestDTORequestBody, void>, "path" | "verb">;

/**
 * sendResetPasswordVerificationCode
 */
export const useSendResetPasswordVerificationCodeUsingPOST = (props: UseSendResetPasswordVerificationCodeUsingPOSTProps) => useMutate<ResponseDTOOfstring | void, void, void, SendSmsRequestDTORequestBody, void>("POST", `/olokoservice/sms/verificationCode/reset-password`, props);


export interface GetSysOperationLogsUsingGETQueryParams {
  /**
   * from
   */
  from?: string;
  /**
   * page
   */
  page?: number;
  /**
   * size
   */
  size?: number;
  /**
   * systemOperationType
   */
  systemOperationType?: string;
  /**
   * to
   */
  to?: string;
  /**
   * userBizId
   */
  userBizId?: string;
}

export type GetSysOperationLogsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfSystemOperationLogDTO, void, GetSysOperationLogsUsingGETQueryParams, void>, "path">;

/**
 * getSysOperationLogs
 */
export const GetSysOperationLogsUsingGET = (props: GetSysOperationLogsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfSystemOperationLogDTO, void, GetSysOperationLogsUsingGETQueryParams, void>
    path={`/olokoservice/system_operation_log`}
    
    {...props}
  />
);

export type UseGetSysOperationLogsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfSystemOperationLogDTO, void, GetSysOperationLogsUsingGETQueryParams, void>, "path">;

/**
 * getSysOperationLogs
 */
export const useGetSysOperationLogsUsingGET = (props: UseGetSysOperationLogsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfSystemOperationLogDTO, void, GetSysOperationLogsUsingGETQueryParams, void>(`/olokoservice/system_operation_log`, props);


export type CreateSystemOperationLogUsingPOSTProps = Omit<MutateProps<ResponseDTO | void, void, void, CreateSystemOperationLogRequestDTO, void>, "path" | "verb">;

/**
 * createSystemOperationLog
 */
export const CreateSystemOperationLogUsingPOST = (props: CreateSystemOperationLogUsingPOSTProps) => (
  <Mutate<ResponseDTO | void, void, void, CreateSystemOperationLogRequestDTO, void>
    verb="POST"
    path={`/olokoservice/system_operation_log`}
    
    {...props}
  />
);

export type UseCreateSystemOperationLogUsingPOSTProps = Omit<UseMutateProps<ResponseDTO | void, void, void, CreateSystemOperationLogRequestDTO, void>, "path" | "verb">;

/**
 * createSystemOperationLog
 */
export const useCreateSystemOperationLogUsingPOST = (props: UseCreateSystemOperationLogUsingPOSTProps) => useMutate<ResponseDTO | void, void, void, CreateSystemOperationLogRequestDTO, void>("POST", `/olokoservice/system_operation_log`, props);


export interface GetSysOperationLogUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GetSysOperationLogUsingGETProps = Omit<GetProps<ResponseDTOOfSystemOperationLogDTO, void, void, GetSysOperationLogUsingGETPathParams>, "path"> & GetSysOperationLogUsingGETPathParams;

/**
 * getSysOperationLog
 */
export const GetSysOperationLogUsingGET = ({bizId, ...props}: GetSysOperationLogUsingGETProps) => (
  <Get<ResponseDTOOfSystemOperationLogDTO, void, void, GetSysOperationLogUsingGETPathParams>
    path={`/olokoservice/system_operation_log/${bizId}`}
    
    {...props}
  />
);

export type UseGetSysOperationLogUsingGETProps = Omit<UseGetProps<ResponseDTOOfSystemOperationLogDTO, void, void, GetSysOperationLogUsingGETPathParams>, "path"> & GetSysOperationLogUsingGETPathParams;

/**
 * getSysOperationLog
 */
export const useGetSysOperationLogUsingGET = ({bizId, ...props}: UseGetSysOperationLogUsingGETProps) => useGet<ResponseDTOOfSystemOperationLogDTO, void, void, GetSysOperationLogUsingGETPathParams>((paramsInPath: GetSysOperationLogUsingGETPathParams) => `/olokoservice/system_operation_log/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface GetUserUsingGETQueryParams {
  /**
   * userBizId
   */
  userBizId?: string;
}

export type GetUserUsingGETProps = Omit<GetProps<ResponseDTOOfUserDTO, void, GetUserUsingGETQueryParams, void>, "path">;

/**
 * getUser
 */
export const GetUserUsingGET = (props: GetUserUsingGETProps) => (
  <Get<ResponseDTOOfUserDTO, void, GetUserUsingGETQueryParams, void>
    path={`/olokoservice/user`}
    
    {...props}
  />
);

export type UseGetUserUsingGETProps = Omit<UseGetProps<ResponseDTOOfUserDTO, void, GetUserUsingGETQueryParams, void>, "path">;

/**
 * getUser
 */
export const useGetUserUsingGET = (props: UseGetUserUsingGETProps) => useGet<ResponseDTOOfUserDTO, void, GetUserUsingGETQueryParams, void>(`/olokoservice/user`, props);


export type CreateUserUsingPOSTProps = Omit<MutateProps<ResponseDTOOfUserDTO | void, void, void, CreateUserRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createUser
 */
export const CreateUserUsingPOST = (props: CreateUserUsingPOSTProps) => (
  <Mutate<ResponseDTOOfUserDTO | void, void, void, CreateUserRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/user`}
    
    {...props}
  />
);

export type UseCreateUserUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfUserDTO | void, void, void, CreateUserRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createUser
 */
export const useCreateUserUsingPOST = (props: UseCreateUserUsingPOSTProps) => useMutate<ResponseDTOOfUserDTO | void, void, void, CreateUserRequestDTORequestBody, void>("POST", `/olokoservice/user`, props);


export type EditUserUsingPUTProps = Omit<MutateProps<ResponseDTOOfUserDTO | void, void, void, UpertUserRequestDTO, void>, "path" | "verb">;

/**
 * editUser
 */
export const EditUserUsingPUT = (props: EditUserUsingPUTProps) => (
  <Mutate<ResponseDTOOfUserDTO | void, void, void, UpertUserRequestDTO, void>
    verb="PUT"
    path={`/olokoservice/user`}
    
    {...props}
  />
);

export type UseEditUserUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfUserDTO | void, void, void, UpertUserRequestDTO, void>, "path" | "verb">;

/**
 * editUser
 */
export const useEditUserUsingPUT = (props: UseEditUserUsingPUTProps) => useMutate<ResponseDTOOfUserDTO | void, void, void, UpertUserRequestDTO, void>("PUT", `/olokoservice/user`, props);


export type BatchGetUserUsingPOSTProps = Omit<MutateProps<ResponseDTOOfListOfUserDTO | void, void, void, BatchGetUserRequestDTO, void>, "path" | "verb">;

/**
 * batchGetUser
 */
export const BatchGetUserUsingPOST = (props: BatchGetUserUsingPOSTProps) => (
  <Mutate<ResponseDTOOfListOfUserDTO | void, void, void, BatchGetUserRequestDTO, void>
    verb="POST"
    path={`/olokoservice/user/batch`}
    
    {...props}
  />
);

export type UseBatchGetUserUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfListOfUserDTO | void, void, void, BatchGetUserRequestDTO, void>, "path" | "verb">;

/**
 * batchGetUser
 */
export const useBatchGetUserUsingPOST = (props: UseBatchGetUserUsingPOSTProps) => useMutate<ResponseDTOOfListOfUserDTO | void, void, void, BatchGetUserRequestDTO, void>("POST", `/olokoservice/user/batch`, props);


export type ResetPasswordUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, ResetPasswordRequestDTO, void>, "path" | "verb">;

/**
 * resetPassword
 */
export const ResetPasswordUsingPUT = (props: ResetPasswordUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, ResetPasswordRequestDTO, void>
    verb="PUT"
    path={`/olokoservice/user/password`}
    
    {...props}
  />
);

export type UseResetPasswordUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, ResetPasswordRequestDTO, void>, "path" | "verb">;

/**
 * resetPassword
 */
export const useResetPasswordUsingPUT = (props: UseResetPasswordUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, ResetPasswordRequestDTO, void>("PUT", `/olokoservice/user/password`, props);


export type GetUserByMobileAndPasswordUsingPOSTProps = Omit<MutateProps<ResponseDTOOfUserDTO | void, void, void, GetUserByMobileAndPasswordRequstDTO, void>, "path" | "verb">;

/**
 * getUserByMobileAndPassword
 */
export const GetUserByMobileAndPasswordUsingPOST = (props: GetUserByMobileAndPasswordUsingPOSTProps) => (
  <Mutate<ResponseDTOOfUserDTO | void, void, void, GetUserByMobileAndPasswordRequstDTO, void>
    verb="POST"
    path={`/olokoservice/user/password/verify`}
    
    {...props}
  />
);

export type UseGetUserByMobileAndPasswordUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfUserDTO | void, void, void, GetUserByMobileAndPasswordRequstDTO, void>, "path" | "verb">;

/**
 * getUserByMobileAndPassword
 */
export const useGetUserByMobileAndPasswordUsingPOST = (props: UseGetUserByMobileAndPasswordUsingPOSTProps) => useMutate<ResponseDTOOfUserDTO | void, void, void, GetUserByMobileAndPasswordRequstDTO, void>("POST", `/olokoservice/user/password/verify`, props);


export interface GetUserByUnionIdUsingPOSTQueryParams {
  /**
   * wxOpenId
   */
  wxOpenId: string;
}

export type GetUserByUnionIdUsingPOSTProps = Omit<MutateProps<ResponseDTOOfUserDTO | void, void, GetUserByUnionIdUsingPOSTQueryParams, void, void>, "path" | "verb">;

/**
 * getUserByUnionId
 */
export const GetUserByUnionIdUsingPOST = (props: GetUserByUnionIdUsingPOSTProps) => (
  <Mutate<ResponseDTOOfUserDTO | void, void, GetUserByUnionIdUsingPOSTQueryParams, void, void>
    verb="POST"
    path={`/olokoservice/user/unionId/verify`}
    
    {...props}
  />
);

export type UseGetUserByUnionIdUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfUserDTO | void, void, GetUserByUnionIdUsingPOSTQueryParams, void, void>, "path" | "verb">;

/**
 * getUserByUnionId
 */
export const useGetUserByUnionIdUsingPOST = (props: UseGetUserByUnionIdUsingPOSTProps) => useMutate<ResponseDTOOfUserDTO | void, void, GetUserByUnionIdUsingPOSTQueryParams, void, void>("POST", `/olokoservice/user/unionId/verify`, props);


export interface UpdateUserByDingTalkIdUsingPUTQueryParams {
  /**
   * dingTalkUnionId
   */
  dingTalkUnionId: string;
}

export type UpdateUserByDingTalkIdUsingPUTProps = Omit<MutateProps<ResponseDTOOfUserDTO | void, void, UpdateUserByDingTalkIdUsingPUTQueryParams, CreateUserRequestDTORequestBody, void>, "path" | "verb">;

/**
 * updateUserByDingTalkId
 */
export const UpdateUserByDingTalkIdUsingPUT = (props: UpdateUserByDingTalkIdUsingPUTProps) => (
  <Mutate<ResponseDTOOfUserDTO | void, void, UpdateUserByDingTalkIdUsingPUTQueryParams, CreateUserRequestDTORequestBody, void>
    verb="PUT"
    path={`/olokoservice/user/update-user-by-ding-talk-id`}
    
    {...props}
  />
);

export type UseUpdateUserByDingTalkIdUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfUserDTO | void, void, UpdateUserByDingTalkIdUsingPUTQueryParams, CreateUserRequestDTORequestBody, void>, "path" | "verb">;

/**
 * updateUserByDingTalkId
 */
export const useUpdateUserByDingTalkIdUsingPUT = (props: UseUpdateUserByDingTalkIdUsingPUTProps) => useMutate<ResponseDTOOfUserDTO | void, void, UpdateUserByDingTalkIdUsingPUTQueryParams, CreateUserRequestDTORequestBody, void>("PUT", `/olokoservice/user/update-user-by-ding-talk-id`, props);


export interface GetAccountUserUsingGETPathParams {
  /**
   * userBizId
   */
  userBizId: string
}

export type GetAccountUserUsingGETProps = Omit<GetProps<ResponseDTOOfUserDTO, void, void, GetAccountUserUsingGETPathParams>, "path"> & GetAccountUserUsingGETPathParams;

/**
 * getAccountUser
 */
export const GetAccountUserUsingGET = ({userBizId, ...props}: GetAccountUserUsingGETProps) => (
  <Get<ResponseDTOOfUserDTO, void, void, GetAccountUserUsingGETPathParams>
    path={`/olokoservice/user/${userBizId}`}
    
    {...props}
  />
);

export type UseGetAccountUserUsingGETProps = Omit<UseGetProps<ResponseDTOOfUserDTO, void, void, GetAccountUserUsingGETPathParams>, "path"> & GetAccountUserUsingGETPathParams;

/**
 * getAccountUser
 */
export const useGetAccountUserUsingGET = ({userBizId, ...props}: UseGetAccountUserUsingGETProps) => useGet<ResponseDTOOfUserDTO, void, void, GetAccountUserUsingGETPathParams>((paramsInPath: GetAccountUserUsingGETPathParams) => `/olokoservice/user/${paramsInPath.userBizId}`, {  pathParams: { userBizId }, ...props });


export interface GetUserAuthoritiesUsingGETQueryParams {
  /**
   * name
   */
  name?: string;
}

export type GetUserAuthoritiesUsingGETProps = Omit<GetProps<ResponseDTOOfListOfUserAuthorityDTO, void, GetUserAuthoritiesUsingGETQueryParams, void>, "path">;

/**
 * getUserAuthorities
 */
export const GetUserAuthoritiesUsingGET = (props: GetUserAuthoritiesUsingGETProps) => (
  <Get<ResponseDTOOfListOfUserAuthorityDTO, void, GetUserAuthoritiesUsingGETQueryParams, void>
    path={`/olokoservice/userAuthority`}
    
    {...props}
  />
);

export type UseGetUserAuthoritiesUsingGETProps = Omit<UseGetProps<ResponseDTOOfListOfUserAuthorityDTO, void, GetUserAuthoritiesUsingGETQueryParams, void>, "path">;

/**
 * getUserAuthorities
 */
export const useGetUserAuthoritiesUsingGET = (props: UseGetUserAuthoritiesUsingGETProps) => useGet<ResponseDTOOfListOfUserAuthorityDTO, void, GetUserAuthoritiesUsingGETQueryParams, void>(`/olokoservice/userAuthority`, props);


export type CreateUserAuthorityUsingPOSTProps = Omit<MutateProps<ResponseDTOOfUserAuthorityDTO | void, void, void, UpsertUserAuthorityRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createUserAuthority
 */
export const CreateUserAuthorityUsingPOST = (props: CreateUserAuthorityUsingPOSTProps) => (
  <Mutate<ResponseDTOOfUserAuthorityDTO | void, void, void, UpsertUserAuthorityRequestDTORequestBody, void>
    verb="POST"
    path={`/olokoservice/userAuthority`}
    
    {...props}
  />
);

export type UseCreateUserAuthorityUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfUserAuthorityDTO | void, void, void, UpsertUserAuthorityRequestDTORequestBody, void>, "path" | "verb">;

/**
 * createUserAuthority
 */
export const useCreateUserAuthorityUsingPOST = (props: UseCreateUserAuthorityUsingPOSTProps) => useMutate<ResponseDTOOfUserAuthorityDTO | void, void, void, UpsertUserAuthorityRequestDTORequestBody, void>("POST", `/olokoservice/userAuthority`, props);


export interface UpdateUserAuthorityUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateUserAuthorityUsingPUTProps = Omit<MutateProps<ResponseDTOOfUserAuthorityDTO | void, void, void, UpsertUserAuthorityRequestDTORequestBody, UpdateUserAuthorityUsingPUTPathParams>, "path" | "verb"> & UpdateUserAuthorityUsingPUTPathParams;

/**
 * updateUserAuthority
 */
export const UpdateUserAuthorityUsingPUT = ({bizId, ...props}: UpdateUserAuthorityUsingPUTProps) => (
  <Mutate<ResponseDTOOfUserAuthorityDTO | void, void, void, UpsertUserAuthorityRequestDTORequestBody, UpdateUserAuthorityUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/userAuthority/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateUserAuthorityUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfUserAuthorityDTO | void, void, void, UpsertUserAuthorityRequestDTORequestBody, UpdateUserAuthorityUsingPUTPathParams>, "path" | "verb"> & UpdateUserAuthorityUsingPUTPathParams;

/**
 * updateUserAuthority
 */
export const useUpdateUserAuthorityUsingPUT = ({bizId, ...props}: UseUpdateUserAuthorityUsingPUTProps) => useMutate<ResponseDTOOfUserAuthorityDTO | void, void, void, UpsertUserAuthorityRequestDTORequestBody, UpdateUserAuthorityUsingPUTPathParams>("PUT", (paramsInPath: UpdateUserAuthorityUsingPUTPathParams) => `/olokoservice/userAuthority/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateUserAuthorityOperationsUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateUserAuthorityOperationsUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, string[], UpdateUserAuthorityOperationsUsingPUTPathParams>, "path" | "verb"> & UpdateUserAuthorityOperationsUsingPUTPathParams;

/**
 * updateUserAuthorityOperations
 */
export const UpdateUserAuthorityOperationsUsingPUT = ({bizId, ...props}: UpdateUserAuthorityOperationsUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, string[], UpdateUserAuthorityOperationsUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/userAuthority/${bizId}/operations`}
    
    {...props}
  />
);

export type UseUpdateUserAuthorityOperationsUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, string[], UpdateUserAuthorityOperationsUsingPUTPathParams>, "path" | "verb"> & UpdateUserAuthorityOperationsUsingPUTPathParams;

/**
 * updateUserAuthorityOperations
 */
export const useUpdateUserAuthorityOperationsUsingPUT = ({bizId, ...props}: UseUpdateUserAuthorityOperationsUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, string[], UpdateUserAuthorityOperationsUsingPUTPathParams>("PUT", (paramsInPath: UpdateUserAuthorityOperationsUsingPUTPathParams) => `/olokoservice/userAuthority/${paramsInPath.bizId}/operations`, {  pathParams: { bizId }, ...props });


export interface GitWithdrawsUsingGETQueryParams {
  /**
   * page
   */
  page?: number;
  /**
   * restaurantBizId
   */
  restaurantBizId?: string;
  /**
   * size
   */
  size?: number;
}

export type GitWithdrawsUsingGETProps = Omit<GetProps<ResponseDTOOfPaginationDTOOfListOfWithdrawDTO, void, GitWithdrawsUsingGETQueryParams, void>, "path">;

/**
 * gitWithdraws
 */
export const GitWithdrawsUsingGET = (props: GitWithdrawsUsingGETProps) => (
  <Get<ResponseDTOOfPaginationDTOOfListOfWithdrawDTO, void, GitWithdrawsUsingGETQueryParams, void>
    path={`/olokoservice/withdraw`}
    
    {...props}
  />
);

export type UseGitWithdrawsUsingGETProps = Omit<UseGetProps<ResponseDTOOfPaginationDTOOfListOfWithdrawDTO, void, GitWithdrawsUsingGETQueryParams, void>, "path">;

/**
 * gitWithdraws
 */
export const useGitWithdrawsUsingGET = (props: UseGitWithdrawsUsingGETProps) => useGet<ResponseDTOOfPaginationDTOOfListOfWithdrawDTO, void, GitWithdrawsUsingGETQueryParams, void>(`/olokoservice/withdraw`, props);


export type CreateWithdrawUsingPOSTProps = Omit<MutateProps<ResponseDTOOfWithdrawDTO | void, void, void, UpsertWithdrawRequestDTO, void>, "path" | "verb">;

/**
 * createWithdraw
 */
export const CreateWithdrawUsingPOST = (props: CreateWithdrawUsingPOSTProps) => (
  <Mutate<ResponseDTOOfWithdrawDTO | void, void, void, UpsertWithdrawRequestDTO, void>
    verb="POST"
    path={`/olokoservice/withdraw`}
    
    {...props}
  />
);

export type UseCreateWithdrawUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfWithdrawDTO | void, void, void, UpsertWithdrawRequestDTO, void>, "path" | "verb">;

/**
 * createWithdraw
 */
export const useCreateWithdrawUsingPOST = (props: UseCreateWithdrawUsingPOSTProps) => useMutate<ResponseDTOOfWithdrawDTO | void, void, void, UpsertWithdrawRequestDTO, void>("POST", `/olokoservice/withdraw`, props);


export interface GitWithdrawUsingGETPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type GitWithdrawUsingGETProps = Omit<GetProps<ResponseDTOOfWithdrawDTO, void, void, GitWithdrawUsingGETPathParams>, "path"> & GitWithdrawUsingGETPathParams;

/**
 * gitWithdraw
 */
export const GitWithdrawUsingGET = ({bizId, ...props}: GitWithdrawUsingGETProps) => (
  <Get<ResponseDTOOfWithdrawDTO, void, void, GitWithdrawUsingGETPathParams>
    path={`/olokoservice/withdraw/${bizId}`}
    
    {...props}
  />
);

export type UseGitWithdrawUsingGETProps = Omit<UseGetProps<ResponseDTOOfWithdrawDTO, void, void, GitWithdrawUsingGETPathParams>, "path"> & GitWithdrawUsingGETPathParams;

/**
 * gitWithdraw
 */
export const useGitWithdrawUsingGET = ({bizId, ...props}: UseGitWithdrawUsingGETProps) => useGet<ResponseDTOOfWithdrawDTO, void, void, GitWithdrawUsingGETPathParams>((paramsInPath: GitWithdrawUsingGETPathParams) => `/olokoservice/withdraw/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface UpdateWithdrawUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type UpdateWithdrawUsingPUTProps = Omit<MutateProps<ResponseDTOOfWithdrawDTO | void, void, void, UpsertWithdrawRequestDTO, UpdateWithdrawUsingPUTPathParams>, "path" | "verb"> & UpdateWithdrawUsingPUTPathParams;

/**
 * updateWithdraw
 */
export const UpdateWithdrawUsingPUT = ({bizId, ...props}: UpdateWithdrawUsingPUTProps) => (
  <Mutate<ResponseDTOOfWithdrawDTO | void, void, void, UpsertWithdrawRequestDTO, UpdateWithdrawUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/withdraw/${bizId}`}
    
    {...props}
  />
);

export type UseUpdateWithdrawUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfWithdrawDTO | void, void, void, UpsertWithdrawRequestDTO, UpdateWithdrawUsingPUTPathParams>, "path" | "verb"> & UpdateWithdrawUsingPUTPathParams;

/**
 * updateWithdraw
 */
export const useUpdateWithdrawUsingPUT = ({bizId, ...props}: UseUpdateWithdrawUsingPUTProps) => useMutate<ResponseDTOOfWithdrawDTO | void, void, void, UpsertWithdrawRequestDTO, UpdateWithdrawUsingPUTPathParams>("PUT", (paramsInPath: UpdateWithdrawUsingPUTPathParams) => `/olokoservice/withdraw/${paramsInPath.bizId}`, {  pathParams: { bizId }, ...props });


export interface DeleteWithdrawUsingPUTPathParams {
  /**
   * bizId
   */
  bizId: string
}

export type DeleteWithdrawUsingPUTProps = Omit<MutateProps<ResponseDTOOfobject | void, void, void, void, DeleteWithdrawUsingPUTPathParams>, "path" | "verb"> & DeleteWithdrawUsingPUTPathParams;

/**
 * deleteWithdraw
 */
export const DeleteWithdrawUsingPUT = ({bizId, ...props}: DeleteWithdrawUsingPUTProps) => (
  <Mutate<ResponseDTOOfobject | void, void, void, void, DeleteWithdrawUsingPUTPathParams>
    verb="PUT"
    path={`/olokoservice/withdraw/${bizId}/delete`}
    
    {...props}
  />
);

export type UseDeleteWithdrawUsingPUTProps = Omit<UseMutateProps<ResponseDTOOfobject | void, void, void, void, DeleteWithdrawUsingPUTPathParams>, "path" | "verb"> & DeleteWithdrawUsingPUTPathParams;

/**
 * deleteWithdraw
 */
export const useDeleteWithdrawUsingPUT = ({bizId, ...props}: UseDeleteWithdrawUsingPUTProps) => useMutate<ResponseDTOOfobject | void, void, void, void, DeleteWithdrawUsingPUTPathParams>("PUT", (paramsInPath: DeleteWithdrawUsingPUTPathParams) => `/olokoservice/withdraw/${paramsInPath.bizId}/delete`, {  pathParams: { bizId }, ...props });


export interface JsApiPayUsingGETQueryParams {
  /**
   * openId
   */
  openId: string;
  /**
   * orderBizId
   */
  orderBizId: string;
}

export type JsApiPayUsingGETProps = Omit<GetProps<ResponseDTO, void, JsApiPayUsingGETQueryParams, void>, "path">;

/**
 * jsApiPay
 */
export const JsApiPayUsingGET = (props: JsApiPayUsingGETProps) => (
  <Get<ResponseDTO, void, JsApiPayUsingGETQueryParams, void>
    path={`/olokoservice/wxpayv3`}
    
    {...props}
  />
);

export type UseJsApiPayUsingGETProps = Omit<UseGetProps<ResponseDTO, void, JsApiPayUsingGETQueryParams, void>, "path">;

/**
 * jsApiPay
 */
export const useJsApiPayUsingGET = (props: UseJsApiPayUsingGETProps) => useGet<ResponseDTO, void, JsApiPayUsingGETQueryParams, void>(`/olokoservice/wxpayv3`, props);


export type PayNotifyUsingPOSTProps = Omit<MutateProps<ResponseDTOOfstring | void, void, void, string, void>, "path" | "verb">;

/**
 * payNotify
 */
export const PayNotifyUsingPOST = (props: PayNotifyUsingPOSTProps) => (
  <Mutate<ResponseDTOOfstring | void, void, void, string, void>
    verb="POST"
    path={`/olokoservice/wxpayv3`}
    
    {...props}
  />
);

export type UsePayNotifyUsingPOSTProps = Omit<UseMutateProps<ResponseDTOOfstring | void, void, void, string, void>, "path" | "verb">;

/**
 * payNotify
 */
export const usePayNotifyUsingPOST = (props: UsePayNotifyUsingPOSTProps) => useMutate<ResponseDTOOfstring | void, void, void, string, void>("POST", `/olokoservice/wxpayv3`, props);


export interface DesecryptUsingGETQueryParams {
  /**
   * xx
   */
  xx?: string;
}

export type DesecryptUsingGETProps = Omit<GetProps<string, void, DesecryptUsingGETQueryParams, void>, "path">;

/**
 * desecrypt
 */
export const DesecryptUsingGET = (props: DesecryptUsingGETProps) => (
  <Get<string, void, DesecryptUsingGETQueryParams, void>
    path={`/olokoservice/wxpayv3/desdecrypt`}
    
    {...props}
  />
);

export type UseDesecryptUsingGETProps = Omit<UseGetProps<string, void, DesecryptUsingGETQueryParams, void>, "path">;

/**
 * desecrypt
 */
export const useDesecryptUsingGET = (props: UseDesecryptUsingGETProps) => useGet<string, void, DesecryptUsingGETQueryParams, void>(`/olokoservice/wxpayv3/desdecrypt`, props);


export interface DesencryptUsingGETQueryParams {
  /**
   * xx
   */
  xx?: string;
}

export type DesencryptUsingGETProps = Omit<GetProps<string, void, DesencryptUsingGETQueryParams, void>, "path">;

/**
 * desencrypt
 */
export const DesencryptUsingGET = (props: DesencryptUsingGETProps) => (
  <Get<string, void, DesencryptUsingGETQueryParams, void>
    path={`/olokoservice/wxpayv3/desencrypt`}
    
    {...props}
  />
);

export type UseDesencryptUsingGETProps = Omit<UseGetProps<string, void, DesencryptUsingGETQueryParams, void>, "path">;

/**
 * desencrypt
 */
export const useDesencryptUsingGET = (props: UseDesencryptUsingGETProps) => useGet<string, void, DesencryptUsingGETQueryParams, void>(`/olokoservice/wxpayv3/desencrypt`, props);


export interface Testmd5UsingGETQueryParams {
  /**
   * xx
   */
  xx?: string;
}

export type Testmd5UsingGETProps = Omit<GetProps<string, void, Testmd5UsingGETQueryParams, void>, "path">;

/**
 * testmd5
 */
export const Testmd5UsingGET = (props: Testmd5UsingGETProps) => (
  <Get<string, void, Testmd5UsingGETQueryParams, void>
    path={`/olokoservice/wxpayv3/md5`}
    
    {...props}
  />
);

export type UseTestmd5UsingGETProps = Omit<UseGetProps<string, void, Testmd5UsingGETQueryParams, void>, "path">;

/**
 * testmd5
 */
export const useTestmd5UsingGET = (props: UseTestmd5UsingGETProps) => useGet<string, void, Testmd5UsingGETQueryParams, void>(`/olokoservice/wxpayv3/md5`, props);


export type V3GetUsingGETProps = Omit<GetProps<string, void, void, void>, "path">;

/**
 * v3Get
 */
export const V3GetUsingGET = (props: V3GetUsingGETProps) => (
  <Get<string, void, void, void>
    path={`/olokoservice/wxpayv3/v3Signature`}
    
    {...props}
  />
);

export type UseV3GetUsingGETProps = Omit<UseGetProps<string, void, void, void>, "path">;

/**
 * v3Get
 */
export const useV3GetUsingGET = (props: UseV3GetUsingGETProps) => useGet<string, void, void, void>(`/olokoservice/wxpayv3/v3Signature`, props);

